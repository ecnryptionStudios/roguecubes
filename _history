{"entries":[{"timestamp":1754499968707,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":491,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":3040,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":204,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1754500629715,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":771,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1754500638327,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":255,"length1":28,"diffs":[[1,"        public sprite: Sprite = sprites.create(img`...`)\n"]]},{"start1":565,"length1":34,"diffs":[[1,"let cubelingPool: Cubeling[] = [\n    new Cubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\"),\n    new Cubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\"),\n    new Cubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\"),\n]\n"]]},{"start1":771,"length1":233,"diffs":[[1,""]]},{"start1":772,"length1":1904,"diffs":[[1,""]]},{"start1":1353,"length1":49,"diffs":[[1,"            base.ability\n"]]},{"start1":1657,"length1":33,"diffs":[[1,""]]},{"start1":1739,"length1":38,"diffs":[[1,""]]}]}]},{"timestamp":1754501191023,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2854,"length1":144,"diffs":[[1,""]]},{"start1":3356,"length1":203,"diffs":[[1,""]]}]}]},{"timestamp":1754501612353,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":68,"length1":93,"diffs":[[1,"        \"device\": \"*\"\n"]]}]}]},{"timestamp":1754502863086,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4378,"length1":50,"diffs":[[1,""]]}]}]},{"timestamp":1754502906775,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":48,"length1":26,"diffs":[[1,""]]},{"start1":504,"length1":56,"diffs":[[1,"// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, image: Image){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, image))\n}\n\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", img`\n"]]},{"start1":1436,"length1":19,"diffs":[[1,"`)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", img`\n"]]},{"start1":2069,"length1":19,"diffs":[[1,"`)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", img`\n"]]},{"start1":2706,"length1":4,"diffs":[[1,"`)\n"]]},{"start1":2710,"length1":452,"diffs":[[1,""]]},{"start1":3604,"length1":121,"diffs":[[1,"        let g = sprites.create(image)\n        g.x = 98\n        g.y = 60 + (18 * index) - 18\n"]]},{"start1":4378,"length1":153,"diffs":[[1,"    story.spriteMoveToLocation(sprite, 0, 0, 100)\n"]]},{"start1":4500,"length1":67,"diffs":[[1,""]]}]}]},{"timestamp":1754503592169,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2994,"length1":45,"diffs":[[1,"        let g = sprites.create(value.image)\n"]]}]}]},{"timestamp":1754503612154,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2994,"length1":125,"diffs":[[1,"        value. = sprites.create(value.image)\n        g.x = 62\n        g.y = 60 + (18*index) - 18\n"]]},{"start1":4566,"length1":153,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, defender.sprite.x, defender.sprite.y-16, 100)\n"]]}]}]},{"timestamp":1754504133591,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":74,"length1":26,"diffs":[[1,""]]},{"start1":281,"length1":29,"diffs":[[1,"        public image: Image\n"]]},{"start1":3045,"length1":204,"diffs":[[1,""]]},{"start1":3777,"length1":204,"diffs":[[1,""]]},{"start1":4043,"length1":26,"diffs":[[1,""]]},{"start1":4819,"length1":108,"diffs":[[1,""]]},{"start1":4886,"length1":74,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":91,"length1":137,"diffs":[[1,"        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\"\n"]]}]}]},{"timestamp":1754504729396,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":307,"length1":30,"diffs":[[1,""]]},{"start1":2451,"length1":251,"diffs":[[1,"function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, costumes[costume]))\n"]]},{"start1":2683,"length1":164,"diffs":[[1,"addCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\")\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\")\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\")\n"]]},{"start1":3819,"length1":24,"diffs":[[1,""]]},{"start1":4379,"length1":26,"diffs":[[1,""]]},{"start1":4478,"length1":101,"diffs":[[1,"        playerTeam.sort()\n"]]},{"start1":4544,"length1":49,"diffs":[[1,"        let defender = enemyTeam[turn]\n"]]}]}]},{"timestamp":1754505322093,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":74,"length1":33,"diffs":[[1,"    public alive: boolean\n"]]},{"start1":4493,"length1":144,"diffs":[[1,""]]},{"start1":4549,"length1":623,"diffs":[[1,"    for (let turn = 0; turn < 3; turn++) {\n        playerTeam.sort((a, b)=>b.speed-a.speed)\n        enemyTeam.sort((a, b) => b.speed - a.speed)\n        let attacker = playerTeam[turn]\n        let defender = enemyTeam[randint(0, 2)] \n        game.splash(\"your turn\")\n        dealDamage(attacker, defender)\n\n        if (defender.currentHealth > 0) {\n            game.splash(\"enemy turn\")\n            dealDamage(defender, attacker)\n"]]},{"start1":4988,"length1":33,"diffs":[[1,""]]}]}]},{"timestamp":1754505921597,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3421,"length1":27,"diffs":[[1,""]]},{"start1":4700,"length1":59,"diffs":[[1,"    while(playerTeam.every(val=>val.alive)||enemyTeam.every(val=>val.alive)){\n"]]},{"start1":4867,"length1":231,"diffs":[[1,"            let aliveAttacker = playerTeam.filter*\n            dealDamage(playerTeam[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n"]]},{"start1":5043,"length1":95,"diffs":[[1,"            playerIndex %= 3\n"]]},{"start1":5089,"length1":302,"diffs":[[1,"            let alive = playerTeam.filter(val => val.alive)\n            dealDamage(enemyTeam[enemyIndex], alive[randint(0, alive.length - 1)])\n"]]},{"start1":5257,"length1":95,"diffs":[[1,"            enemyIndex %= 3\n            playerIndex %= playerTeam\n"]]},{"start1":6165,"length1":51,"diffs":[[1,"    let playerWins = enemyTeam.every(e => e.currentHealth <= 0)\n"]]}]}]},{"timestamp":1754506499584,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":452,"length1":100,"diffs":[[1,""]]},{"start1":2952,"length1":68,"diffs":[[1,""]]},{"start1":3051,"length1":43,"diffs":[[1,"    playerTeam.forEach((value, index)=>{\n"]]},{"start1":3375,"length1":48,"diffs":[[1,"        value.sprite.y = 60 + (18*index) - 18\n"]]},{"start1":4727,"length1":71,"diffs":[[1,"    while(playerTeam.ma||enemyTeam.every(val=>val.alive)){\n"]]},{"start1":6508,"length1":49,"diffs":[[1,"    let playerWins = enemyTeam.every(e => e.alive)\n"]]},{"start1":7394,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754507099003,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":464,"length1":134,"diffs":[[1,"        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack)\n"]]},{"start1":3052,"length1":346,"diffs":[[1,"    story.showPlayerChoices(\"Shop\", \"Battle\")\n"]]},{"start1":3139,"length1":95,"diffs":[[1,"        cubelingPool[0],\n        cubelingPool[1],\n        cubelingPool[2]\n"]]},{"start1":3593,"length1":0,"diffs":[[1,"        value.attack += 30\n"]]},{"start1":3851,"length1":169,"diffs":[[1,"        enemyTeam.push(new Cubeling(\n            base.name,\n            base.costume,\n            base.maxHealth + difficulty * 5,\n            base.attack + difficulty * 2,\n            base.defense + difficulty,\n            base.ability,\n            base.speed,\n            base.image\n        ))\n"]]}]}]},{"timestamp":1754507648168,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":668,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1754518928325,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":668,"length1":5,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754518930148,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":607,"length1":216,"diffs":[[1,""]]},{"start1":668,"length1":36,"diffs":[[1,"let \n"]]},{"start1":3109,"length1":152,"diffs":[[1,""]]},{"start1":3449,"length1":62,"diffs":[[1,""]]},{"start1":3477,"length1":0,"diffs":[[1,"    playerTeam = [\n        cubelingPool[0].dupe(),\n        cubelingPool[1].dupe(),\n        cubelingPool[2].dupe()\n    ]\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":162,"length1":128,"diffs":[[1,"        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\"\n"]]}]}]},{"timestamp":1754519514504,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":606,"length1":0,"diffs":[[1,"\n"]]},{"start1":639,"length1":364,"diffs":[[1,"    let index = 0\n    let row = 0\n    for(let i of ownedCubelings){\n        let newSprite = sprites.create(i.image)\n        grid.place(newSprite, tiles.getTileLocation(0, 0))\n"]]},{"start1":820,"length1":794,"diffs":[[1,""]]},{"start1":997,"length1":66,"diffs":[[1,""]]},{"start1":3890,"length1":0,"diffs":[[1,"        startGame()\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":375,"length1":72,"diffs":[[1,"        \"assets.json\"\n"]]}]},{"type":"added","filename":"tilemap.g.jres","value":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"added","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tilemap\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"level1\":\n            case \"level1\":return tiles.createTilemap(hex`0a00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, img`\n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n. . . . . . . . . . \n`, [myTiles.transparency16], TileScale.Sixteen);\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1754520289961,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1802,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1754520291981,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1802,"length1":957,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1754520888640,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":48,"length1":0,"diffs":[[1,"    public sprite: Sprite\n    public alive: boolean = true\n"]]},{"start1":420,"length1":37,"diffs":[[1,""]]},{"start1":452,"length1":61,"diffs":[[1,""]]},{"start1":679,"length1":34,"diffs":[[1,"    let selected: Cubeling[]\n"]]},{"start1":781,"length1":91,"diffs":[[1,"            let newSprite = sprites.create(ownedCubelings[i].image)\n"]]},{"start1":1972,"length1":84,"diffs":[[1,""]]},{"start1":2607,"length1":1367,"diffs":[[1,"        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10)\n        if(teamMenuOpen && selected.indexOf(hovered)){\n\n"]]},{"start1":2936,"length1":12,"diffs":[[1,""]]}]}]},{"timestamp":1754521488380,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2875,"length1":66,"diffs":[[1,"            if (selected.indexOf(ownedCubelings[hovered]) != -1){\n"]]},{"start1":3924,"length1":590,"diffs":[[1,"                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.))\n"]]},{"start1":4287,"length1":15,"diffs":[[1,"let gems = 0\n"]]},{"start1":6711,"length1":101,"diffs":[[1,""]]},{"start1":6756,"length1":0,"diffs":[[1,"    playerTeam = [\n        cubelingPool[0].dupe(),\n        cubelingPool[1].dupe(),\n        cubelingPool[2].dupe()\n    ]\n"]]},{"start1":7248,"length1":88,"diffs":[[1,""]]},{"start1":11305,"length1":119,"diffs":[[1,"        let newC = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)]\n        playerTeam.push(newC)\n"]]},{"start1":11460,"length1":20,"diffs":[[1,""]]},{"start1":11513,"length1":20,"diffs":[[1,""]]}]}]},{"timestamp":1754522167664,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":229,"length1":123,"diffs":[[1,"        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\"\n"]]}]}]},{"timestamp":1754522174335,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7597,"length1":544,"diffs":[[1,""]]},{"start1":7797,"length1":156,"diffs":[[1,""]]},{"start1":11131,"length1":53,"diffs":[[1,""]]}]}]},{"timestamp":1754522778149,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8341,"length1":13,"diffs":[[1,"            textSprite.setText(money.toString())\n            textSprite.x=80\n            textSprite2.setText(gems.toString())\n            textSprite.x = 80\n"]]}]}]},{"timestamp":1754522795291,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":314,"length1":26,"diffs":[[1,""]]},{"start1":384,"length1":27,"diffs":[[1,"        uid++\n"]]},{"start1":8141,"length1":42,"diffs":[[1,"        story.showPlayerChoices(\"Upgrade\", \"Recruit\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Recruit\"){\n            recruitCubeling()\n            \n        }\n"]]},{"start1":8415,"length1":579,"diffs":[[1,""]]},{"start1":12402,"length1":63,"diffs":[[1,"function recruitCubeling() {\n"]]},{"start1":12640,"length1":87,"diffs":[[1,"        startGame()\n"]]},{"start1":12713,"length1":29,"diffs":[[1,"        startGame()\n"]]}]}]},{"timestamp":1754523391141,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":530,"length1":254,"diffs":[[1,"    dupe(){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image)\n"]]},{"start1":6958,"length1":121,"diffs":[[1,"    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume]))\n"]]},{"start1":7255,"length1":95,"diffs":[[1,"    cubelingPool[0].dupe(),\n    cubelingPool[1].dupe(),\n    cubelingPool[2].dupe()\n"]]},{"start1":8750,"length1":424,"diffs":[[1,""]]},{"start1":9476,"length1":35,"diffs":[[1,"        let cub = base.dupe()\n"]]},{"start1":12945,"length1":89,"diffs":[[1,"        let newC = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)].dupe()\n"]]}]}]},{"timestamp":1754523979936,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":530,"length1":27,"diffs":[[1,"    upgradeDamage: number\n"]]},{"start1":583,"length1":28,"diffs":[[1,"    upgradesDefencs: number\n"]]},{"start1":9190,"length1":25,"diffs":[[1,"        story.showPlayerChoices(\"Damage: \" + playerTeam[ansInx].upgradeDamage + \", $\" + , \"Health\", \"Defense\")\n"]]},{"start1":9403,"length1":1112,"diffs":[[1,""]]}]}]},{"timestamp":1754524577690,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9191,"length1":37,"diffs":[[1,"        upgrades(ansInx)\n"]]},{"start1":9318,"length1":71,"diffs":[[1,"function upgrades(ansInx: number){\n"]]},{"start1":9670,"length1":163,"diffs":[[1,"        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense)\n"]]},{"start1":9823,"length1":258,"diffs":[[1,"    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage)){\n"]]},{"start1":10037,"length1":93,"diffs":[[1,""]]},{"start1":10076,"length1":421,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth)){\n"]]},{"start1":10368,"length1":452,"diffs":[[1,""]]},{"start1":10381,"length1":29,"diffs":[[1,"        playerTeam[ansInx].defense += 5\n"]]}]}]},{"timestamp":1754524955953,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10321,"length1":20,"diffs":[[1,"        upgrades()\n"]]}]}]},{"timestamp":1754534161888,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10321,"length1":25,"diffs":[[1,"        upgrades(a)\n"]]}]}]},{"timestamp":1754534163000,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":314,"length1":31,"diffs":[[1,""]]},{"start1":530,"length1":94,"diffs":[[1,"    upgradesDamage: number\n    upgradesHealth: number\n    upgradesDefense: number\n"]]},{"start1":641,"length1":157,"diffs":[[1,"        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, uidCount)\n"]]},{"start1":6930,"length1":282,"diffs":[[1,"function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], false))\n"]]},{"start1":7191,"length1":198,"diffs":[[1,"addCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10)\n"]]},{"start1":10321,"length1":37,"diffs":[[1,"        upgrades(ansInx)\n"]]},{"start1":10863,"length1":37,"diffs":[[1,""]]},{"start1":11315,"length1":37,"diffs":[[1,""]]},{"start1":15421,"length1":22,"diffs":[[1,"    if (gems >= 500) {\n        gems -= 500\n        let newC = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)].dupe(true)\n        ownedCubelings.push(newC)\n        game.splash(`Recruited ${newC.name}!`)\n        jems.setText(gems.toString())\n        jems.x = 80\n        shopping(mone, jems)\n    } else {\n"]]},{"start1":15803,"length1":15,"diffs":[[1,""]]},{"start1":15809,"length1":569,"diffs":[[1,""]]}]}]},{"timestamp":1754534793469,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7271,"length1":26,"diffs":[[1,"addCubeling(\"Basic\", \"\")\n"]]}]}]},{"timestamp":1754534794578,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6914,"length1":665,"diffs":[[1,"`\n"]]},{"start1":7271,"length1":58,"diffs":[[1,"addCubeling(\"Basic\", \"N\")\n"]]},{"start1":7518,"length1":63,"diffs":[[1,"    cubelingPool[1].dupe(true),\n    cubelingPool[2].dupe(true)\n"]]},{"start1":14530,"length1":185,"diffs":[[1,"    game.splash(`${attacker.name} dealt ${damage} to ${defender.name}`)\n"]]},{"start1":14845,"length1":134,"diffs":[[1,"        game.splash(`${defender.name} got exausted`)\n"]]},{"start1":14904,"length1":71,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":291,"length1":120,"diffs":[[1,"        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n"]]}]}]},{"timestamp":1754535463292,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14893,"length1":51,"diffs":[[1,"    let damage = attacker.attack - defender.defense\n"]]}]}]},{"timestamp":1754535468814,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12700,"length1":0,"diffs":[[1,"// === Spawn AI Enemy Team ===\n"]]},{"start1":12774,"length1":511,"diffs":[[1,""]]},{"start1":12808,"length1":161,"diffs":[[1,"        let base = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)]\n        let cub = base.dupe(false)\n"]]},{"start1":13032,"length1":1,"diffs":[[1,""]]},{"start1":13066,"length1":39,"diffs":[[1,""]]},{"start1":13108,"length1":42,"diffs":[[1,"        let image = value.image.clone()\n"]]},{"start1":13215,"length1":73,"diffs":[[1,"        let statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n"]]},{"start1":13505,"length1":574,"diffs":[[1,""]]},{"start1":14893,"length1":130,"diffs":[[1,"    let damage = attacker.attack- defender.defense\n"]]},{"start1":16273,"length1":33,"diffs":[[1,"        game.splash(\"You lost!\")\n        game.over(false)\n"]]}]}]},{"timestamp":1754572544496,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":356,"length1":132,"diffs":[[1,"        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\"\n"]]}]}]},{"timestamp":1754572724237,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8166,"length1":173,"diffs":[[1,""]]},{"start1":8278,"length1":26,"diffs":[[1,""]]},{"start1":8324,"length1":0,"diffs":[[1,"    ownedCubelings = playerTeam\n"]]},{"start1":17531,"length1":136,"diffs":[[1,""]]}]}]},{"timestamp":1754573323443,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8332,"length1":192,"diffs":[[1,"    \n"]]},{"start1":8339,"length1":0,"diffs":[[1,"playerTeam = [\n    cubelingPool[0].dupe(true),\n    cubelingPool[0].dupe(true),\n    cubelingPool[0].dupe(true)\n]\nownedCubelings=playerTeam\n"]]}]}]},{"timestamp":1754574676704,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7934,"length1":56,"diffs":[[1,"addCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 0.5)\n"]]}]}]},{"timestamp":1754574704799,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7934,"length1":229,"diffs":[[1,"addCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 0)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 1)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 1)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 1)\n"]]},{"start1":13663,"length1":164,"diffs":[[1,"        cub.maxHealth += difficulty * 5\n        cub.attack += difficulty * 2\n        cub.defense += difficulty\n\n"]]},{"start1":13810,"length1":239,"diffs":[[1,""]]},{"start1":13954,"length1":63,"diffs":[[1,"        value.sprite = sprites.create(image)\n"]]}]}]},{"timestamp":1754575304458,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13862,"length1":0,"diffs":[[1,"    function reset(){\n        for(let i of playerTeam){\n            i.currentHealth=i.maxHealth\n        }\n        sprites.allOfKind(SpriteKind.Enemy).forEach(v=>sprites.destroy(v))\n        sprites.allOfKind(SpriteKind.Text).forEach\n    }\n\n"]]},{"start1":17965,"length1":143,"diffs":[[1,""]]}]}]},{"timestamp":1754577638894,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17726,"length1":57,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Enemy).forEach(v=>sprites.destroy)\n"]]}]}]},{"timestamp":1754578704197,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17726,"length1":59,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Enemy).forEach(v=>)\n"]]}]}]},{"timestamp":1754578708038,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12589,"length1":76,"diffs":[[1,"        let statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n"]]},{"start1":16580,"length1":152,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, 100)\n"]]},{"start1":16918,"length1":209,"diffs":[[1,"    statusbars.getStatusBarAttachedTo(StatusBarKind.Health, defender.sprite).value = defender.currentHealth\n"]]},{"start1":17726,"length1":239,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Enemy).forEach(v=>{})\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>sprites.destroy)\n"]]}]}]},{"timestamp":1754579306707,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":16585,"length1":168,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, ay)\n"]]},{"start1":17131,"length1":81,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, 100)\n"]]},{"start1":17767,"length1":189,"diffs":[[1,"        for (let c of playerTeam) c.currentHealth = c.maxHealth\n"]]},{"start1":18070,"length1":44,"diffs":[[1,""]]}]}]},{"timestamp":1754579906395,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":561,"length1":28,"diffs":[[1,""]]},{"start1":12751,"length1":33,"diffs":[[1,"        statusbar.attachToSprite(value.sprite)\n"]]},{"start1":14233,"length1":33,"diffs":[[1,"        statusbar.attachToSprite(value.sprite)\n"]]},{"start1":17986,"length1":168,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Enemy).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n"]]},{"start1":18225,"length1":0,"diffs":[[1,"        statusbars.allOfKind(StatusBarKind)\n"]]}]}]},{"timestamp":1754580487809,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":16938,"length1":51,"diffs":[[1,"    let stat = statusbars.getStatusBarAttachedTo(StatusBarKind.Health, defender.sprite) || statusbars.getStatusBarAttachedTo(StatusBarKind.EnemyHealth, defender.sprite)\n    stat.value = defender.currentHealth\n"]]},{"start1":17874,"length1":45,"diffs":[[1,"            statusbars.getStatusBarAttachedTo(StatusBarKind.Health, c.sprite).value = c.currentHealth\n"]]},{"start1":18020,"length1":31,"diffs":[[1,"            statusbars.getStatusBarAttachedTo(StatusBarKind.EnemyHealth, e.sprite).destroy()\n"]]}]}]},{"timestamp":1754581293029,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17996,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1754581595851,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12888,"length1":83,"diffs":[[1,""]]},{"start1":14356,"length1":83,"diffs":[[1,""]]},{"start1":17996,"length1":0,"diffs":[[1,"        \n"]]}]}]},{"timestamp":1754591422476,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8550,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1754591477036,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8550,"length1":30,"diffs":[[1,"    \n"]]},{"start1":12976,"length1":27,"diffs":[[1,""]]},{"start1":17160,"length1":39,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    if(defender.currentHealth <= 0){\n"]]},{"start1":17449,"length1":81,"diffs":[[1,""]]},{"start1":17520,"length1":5,"diffs":[[1,"}\n"]]},{"start1":18256,"length1":0,"diffs":[[1,"        settings.writeString(JSON.stringify({money, gems, owned:ownedCubelings, team:playerTeam}), \"data\")\n"]]},{"start1":19337,"length1":149,"diffs":[[1,""]]}]}]},{"timestamp":1754592075094,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17574,"length1":2,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1754592147927,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17577,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1754607565814,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17577,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754607682475,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":17704,"length1":19,"diffs":[[1,""]]}]}]},{"timestamp":1754610228959,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8276,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1754611550896,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8276,"length1":9,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1754611552821,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8221,"length1":41,"diffs":[[1,"    let data = JSON.parse(settings.readString(\"data\"))\n    sett\n"]]},{"start1":19352,"length1":118,"diffs":[[1,"    settings.writeString(JSON.stringify({ money, gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n"]]}]}]},{"timestamp":1754612190955,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8365,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1754614883240,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8365,"length1":8,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1754614885135,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8192,"length1":37,"diffs":[[1,"if(settings.exists(\"data\")){\n"]]},{"start1":8365,"length1":43,"diffs":[[1,"    Con\n"]]}]}]},{"timestamp":1754615145320,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8192,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1754856956404,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8191,"length1":4,"diffs":[[1,""]]},{"start1":8192,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754856958116,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7601,"length1":674,"diffs":[[1,"    `\n"]]},{"start1":8191,"length1":65,"diffs":[[1,"add\n"]]}]}]},{"timestamp":1754857778410,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":18775,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1754857872979,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5078,"length1":47,"diffs":[[1,""]]},{"start1":18775,"length1":27,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1754858453935,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3081,"length1":57,"diffs":[[1,"        if(teamMenuOpen){\n"]]},{"start1":5078,"length1":42,"diffs":[[1,"let rarityMap = {\n"]]},{"start1":14000,"length1":78,"diffs":[[1,"    const allowed = cubelingPool.filter(c => c.rarity <= difficulty)\n"]]}]}]},{"timestamp":1754869040663,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4759,"length1":62,"diffs":[[1,"                }\n"]]}]}]},{"timestamp":1754869096258,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4187,"length1":53,"diffs":[[1,""]]},{"start1":4759,"length1":18,"diffs":[[1,"           grid.getSprites(tiles.getTileLocation(0, 0))     }\n"]]},{"start1":4906,"length1":168,"diffs":[[1,""]]}]}]},{"timestamp":1754869455912,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5330,"length1":43,"diffs":[[1,"let rarityMap: {[key:number]: number} = {\n"]]}]}]},{"timestamp":1754872602720,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5330,"length1":44,"diffs":[[1,"let rarityMap: {[key:number]: [number} = {\n"]]}]}]},{"timestamp":1754872606385,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5330,"length1":104,"diffs":[[1,"let rarityMap: {[key:number]: [number]} = {\n    1:1,\n    2:4,\n    4:10\n"]]},{"start1":14278,"length1":159,"diffs":[[1,"    const allowed = cubelingPool.filter(c => c.rarity <= rarityMap[c.rarity])\n"]]}]}]},{"timestamp":1754876084656,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14959,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1754876125387,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14363,"length1":107,"diffs":[[1,"    const allowed = cubelingPool.filter(c => difficulty >= map[c.rarity][1]&&difficulty>=map[c.rarity][0])\n"]]},{"start1":14879,"length1":60,"diffs":[[1,"        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        \n"]]}]}]},{"timestamp":1754876724996,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5330,"length1":98,"diffs":[[1,"let rarityMap: {[key:number]: [number, number]} = {\n    1:[1, 20],\n    2:[4, 100],\n    4:[10, Infinity]\n}\n"]]},{"start1":14311,"length1":38,"diffs":[[1,"    let map = rarityMap as {[key:number]: number[]}\n"]]},{"start1":14879,"length1":69,"diffs":[[1,"        const base = weightedPool[randint(0, weightedPool)]\n"]]}]}]},{"timestamp":1754920697018,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14303,"length1":22,"diffs":[[1,"    let map = rarityMap as number[][]\n"]]}]}]},{"timestamp":1754920697483,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5330,"length1":30,"diffs":[[1,"let rarityMap: [number, number][] = [\n"]]},{"start1":14303,"length1":225,"diffs":[[1,"    let mapnumber[][]\n    const allowed = cubelingPool.filter(c => difficulty >= map[c.rarity][0]&&difficulty<=map[c.rarity][1])\n"]]}]}]},{"timestamp":1754921338826,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19012,"length1":32,"diffs":[[1,"        money += difficulty * 100\n"]]}]}]},{"timestamp":1754921372017,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19012,"length1":43,"diffs":[[1,"        money += difficulty * 0\n"]]},{"start1":19611,"length1":122,"diffs":[[1,""]]},{"start1":20625,"length1":5,"diffs":[[1,"    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n"]]}]}]},{"timestamp":1754922063044,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19012,"length1":45,"diffs":[[1,"        money += Math.pow(difficulty, 0.5)\n"]]}]}]},{"timestamp":1754922067339,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9345,"length1":38,"diffs":[[1,""]]},{"start1":18834,"length1":562,"diffs":[[1,""]]},{"start1":19012,"length1":55,"diffs":[[1,"        money += MaMath.pow(difficulty, 0.5)\n"]]},{"start1":19624,"length1":15,"diffs":[[1,"        settings.writeJSON(\"data\", JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }))\n"]]}]}]},{"timestamp":1754922666371,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19182,"length1":221,"diffs":[[1,"            speed: i.speed\n"]]},{"start1":19220,"length1":0,"diffs":[[1,"        i.speed\n"]]},{"start1":19242,"length1":15,"diffs":[[1,""]]},{"start1":19245,"length1":787,"diffs":[[1,""]]},{"start1":19262,"length1":152,"diffs":[[1,"    let ownd = []\n    for(let i of ownedCubelings)\n    settings.writeJSON(\"data\", JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }))\n"]]}]}]},{"timestamp":1754923264057,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9267,"length1":25,"diffs":[[1,""]]},{"start1":9383,"length1":106,"diffs":[[1,"    playerTeam = data.team\n    ownedCubelings = data.owned\n"]]},{"start1":18920,"length1":41,"diffs":[[1,"    let end: Object[] = []\n"]]},{"start1":19438,"length1":79,"diffs":[[1,"function jsonToCubelings(cublings: {[key: string]:any}[]) {\n"]]},{"start1":19719,"length1":45,"diffs":[[1,""]]},{"start1":19897,"length1":0,"diffs":[[1,"end.push({\n    name: i.name,\n    costume: i.costume,\n    maxHealth: i.maxHealth,\n    attack: i.attack,\n    defense: i.defense,\n    ability: i.ability,\n    speed: i.speed,\n    rarity: i.rarity,\n    uid: i.uid,\n    upgradesDamage: i.upgradesDamage,\n    upgradesHealth: i.upgradesHealth,\n    upgradesDefense: i.upgradesDefense\n})\n\n"]]}]}]},{"timestamp":1754923924012,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9267,"length1":0,"diffs":[[1,"settings.remove(\"data\")\n\n"]]}]}]},{"timestamp":1754924077373,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":441,"length1":28,"diffs":[[1,"        if(uidCount) uid++\n"]]},{"start1":683,"length1":30,"diffs":[[1,"    dupe(uidCount: boolean){\n"]]},{"start1":984,"length1":76,"diffs":[[1,"    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n"]]},{"start1":2175,"length1":300,"diffs":[[1,"        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n"]]},{"start1":2816,"length1":51,"diffs":[[1,"        } else if(grid.spriteCol(mySprite) < 9){\n"]]},{"start1":2990,"length1":225,"diffs":[[1,"        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n"]]},{"start1":4468,"length1":44,"diffs":[[1,"                if(selected.length == 3){\n"]]},{"start1":4915,"length1":174,"diffs":[[1,"                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v=>v.kind()==SpriteKind.Food).forEach(v=>v.destroy())\n"]]},{"start1":5462,"length1":43,"diffs":[[1,"let costumes: {[key: string]: Image} = {\n"]]},{"start1":8687,"length1":154,"diffs":[[1,"function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n"]]},{"start1":9267,"length1":41,"diffs":[[1,"if(settings.readJSON(\"data\")!=null){\n"]]},{"start1":9717,"length1":32,"diffs":[[1,"    ownedCubelings=playerTeam\n"]]},{"start1":9880,"length1":33,"diffs":[[1,"    while(story.isMenuOpen()){\n"]]},{"start1":9934,"length1":45,"diffs":[[1,"    if(story.getLastAnswer() == \"Battle\"){\n"]]},{"start1":9994,"length1":50,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Shop\"){\n"]]},{"start1":10257,"length1":52,"diffs":[[1,"        textSprite.y=30\n        textSprite.x=80\n"]]},{"start1":10520,"length1":54,"diffs":[[1,"        textSprite2.y=19\n        textSprite2.x=80\n"]]},{"start1":10680,"length1":56,"diffs":[[1,"function shopping(mone: TextSprite, jems: TextSprite){\n"]]},{"start1":11157,"length1":37,"diffs":[[1,"        while(story.isMenuOpen()) {\n"]]},{"start1":11609,"length1":72,"diffs":[[1,"function upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n"]]},{"start1":12166,"length1":259,"diffs":[[1,"    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n"]]},{"start1":12637,"length1":266,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n"]]},{"start1":13731,"length1":20,"diffs":[[1,"function battle(){\n"]]},{"start1":14155,"length1":45,"diffs":[[1,"        value.health.y = value.sprite.y-10\n"]]},{"start1":14380,"length1":239,"diffs":[[1,"    const allowed = cubelingPool.filter(c => {console.log(rarityMap[c.rarity-1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity-1][1]); return difficulty >= rarityMap[c.rarity-1][0]&&difficulty<=rarityMap[c.rarity-1][1]})\n"]]},{"start1":15014,"length1":71,"diffs":[[1,"        const base = weightedPool[randint(0, weightedPool.length-1)]\n"]]},{"start1":15164,"length1":47,"diffs":[[1,"        cub.maxHealth += (difficulty * 5)-10\n"]]},{"start1":15251,"length1":81,"diffs":[[1,"        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n"]]},{"start1":15878,"length1":45,"diffs":[[1,"        value.health.y = value.sprite.y-10\n"]]},{"start1":16812,"length1":341,"diffs":[[1,"    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n"]]},{"start1":17893,"length1":142,"diffs":[[1,"    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n"]]},{"start1":18091,"length1":237,"diffs":[[1,"    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n"]]},{"start1":18764,"length1":117,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n"]]},{"start1":18919,"length1":122,"diffs":[[1,"function cubelingsToJSON(cublings: Cubeling[]){\n    let end: {[key: string]: any}[] = []\n    for(let i of cublings){\n"]]},{"start1":19499,"length1":82,"diffs":[[1,"function jsonToCubelings(cublings: {[key: string]:any}[], uidCount: boolean) {\n"]]},{"start1":19799,"length1":49,"diffs":[[1,"        if(uidCount)uid=Math.max(uid, i.uid)\n"]]},{"start1":20022,"length1":18,"diffs":[[1,"function save(){\n"]]},{"start1":20250,"length1":51,"diffs":[[1,"    let playerWins = !enemyTeam.some(v=>v.alive)\n"]]},{"start1":20521,"length1":36,"diffs":[[1,"        for (let c of playerTeam){\n"]]},{"start1":20680,"length1":35,"diffs":[[1,"        for (let e of enemyTeam){\n"]]},{"start1":20786,"length1":58,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n"]]},{"start1":21983,"length1":43,"diffs":[[1,"game.onUpdateInterval(2000, function(){\n    \n"]]}]}]},{"timestamp":1754924807629,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9392,"length1":30,"diffs":[[1,"    console.log(JSON.stringify(data))\n"]]}]}]},{"timestamp":1754924821928,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9392,"length1":22,"diffs":[[1,"    console.log(typeof data))\n"]]},{"start1":9572,"length1":0,"diffs":[[1,"    console.log(settings.readJSON(\"data\"))\n"]]},{"start1":20175,"length1":136,"diffs":[[1,"    settings.writeJSON(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n"]]}]}]},{"timestamp":1754925562515,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":20124,"length1":135,"diffs":[[1,"    settings.writeJSON(\"data\", { money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) })\n"]]}]}]},{"timestamp":1754925578914,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9351,"length1":55,"diffs":[[1,"    let data = settings.readJSON(\"data\")\n"]]},{"start1":11686,"length1":67,"diffs":[[1,""]]},{"start1":11715,"length1":388,"diffs":[[1,"        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n"]]},{"start1":12172,"length1":249,"diffs":[[1,"    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) {\n"]]},{"start1":12644,"length1":294,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) {\n"]]},{"start1":20124,"length1":154,"diffs":[[1,"    settings.writeStr(\"data\", { money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) })\n"]]}]}]},{"timestamp":1754926176847,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11737,"length1":56,"diffs":[[1,"    let money = (a: number)=>\n"]]},{"start1":11796,"length1":276,"diffs":[[1,"        \"Damage: \" + teamAns.upgradesDamage + \", $\" + ((5 * teamAns.upgradesDamage * teamAns.rarity) + teamAns.upgradesDamage),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + ((5 * teamAns.upgradesHealth * teamAns.rarity) + teamAns.upgradesHealth),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + ((5 * teamAns.upgradesDefense * teamAns.rarity) + teamAns.upgradesDefense),\n"]]},{"start1":12205,"length1":164,"diffs":[[1,"    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + ((5 * teamAns.upgradesDamage * teamAns.rarity) + teamAns.upgradesDamage) && money >= (5 * teamAns.upgradesDamage * teamAns.rarity) + playerTeam[ansInx].upgradesDamage) {\n"]]}]}]},{"timestamp":1754926304921,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12283,"length1":26,"diffs":[[1,"        playerTeam[ansInx].upgradesDamage++\n"]]}]}]},{"timestamp":1754930140854,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12283,"length1":33,"diffs":[[1,"        .upgradesDamage++\n"]]}]}]},{"timestamp":1754930141623,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11002,"length1":43,"diffs":[[1,"        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n"]]},{"start1":11628,"length1":666,"diffs":[[1,""]]},{"start1":12119,"length1":56,"diffs":[[1,""]]},{"start1":12283,"length1":51,"diffs":[[1,""]]},{"start1":12316,"length1":28,"diffs":[[1,"        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n"]]},{"start1":12485,"length1":337,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth * playerTeam[ansInx].rarity) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) {\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n"]]},{"start1":13068,"length1":290,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n"]]}]}]},{"timestamp":1754930721747,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":12360,"length1":346,"diffs":[[1,"    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)) && money >= moneyCalc(teamAns.upgradesDamage)) {\n        money -= moneyCalc(teamAns.upgradesDamage)\n        teamAns.upgradesDamage++\n        teamAns.attack += 5\n"]]},{"start1":12673,"length1":411,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)) && money >= moneyCalc(teamAns.upgradesHealth)) {\n        money -= moneyCalc(teamAns.upgradesHealth)\n        teamAns.upgradesHealth++\n        teamAns.maxHealth += 10\n        teamAns.currentHealth = teamAns.maxHealth\n"]]},{"start1":13047,"length1":360,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)) && money >= moneyCalc(teamAns.upgradesDefense)) {\n        money -= moneyCalc(teamAns.upgradesDefense)\n        teamAns.upgradesDefense++\n        teamAns.defense += 5\n"]]},{"start1":13387,"length1":35,"diffs":[[1,"        shopping(mone, jems)\n"]]},{"start1":14478,"length1":41,"diffs":[[1,"        const weight = 1 / cub.rarity\n"]]},{"start1":14833,"length1":69,"diffs":[[1,"\n"]]},{"start1":14877,"length1":53,"diffs":[[1,"        cub.maxHealth += (difficulty * 5) - 10\n"]]},{"start1":14966,"length1":93,"diffs":[[1,"        cub.attack += (difficulty * 2) - 4\n        cub.defense += difficulty - 2\n"]]},{"start1":20246,"length1":15,"diffs":[[1,""]]}]}]},{"timestamp":1754931309331,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14698,"length1":38,"diffs":[[1,"        const weight = 1 / (cub.rarity -\n"]]}]}]},{"timestamp":1754931845265,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14945,"length1":44,"diffs":[[1,"        const base = weightedPool[randint(0, weightedPool.length - 1)]\n"]]},{"start1":15958,"length1":725,"diffs":[[1,"function getWeightedCubeling(rarityBias: number): Cubeling {\n"]]},{"start1":16050,"length1":24,"diffs":[[1,""]]},{"start1":16086,"length1":111,"diffs":[[1,"        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n"]]},{"start1":16232,"length1":56,"diffs":[[1,"    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n"]]},{"start1":16369,"length1":70,"diffs":[[1,"        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n"]]},{"start1":16478,"length1":39,"diffs":[[1,"    return cubelingPool[0].dupe(false) // fallback\n"]]}]}]},{"timestamp":1754932544540,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":19175,"length1":8,"diffs":[[1,""]]}]}]},{"timestamp":1754932577091,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13644,"length1":0,"diffs":[[1,"\n"]]},{"start1":13665,"length1":20321,"diffs":[[1,""]]},{"start1":13835,"length1":37,"diffs":[[1,""]]},{"start1":15641,"length1":37,"diffs":[[1,""]]},{"start1":19175,"length1":187,"diffs":[[1,"    def\n"]]},{"start1":19253,"length1":26,"diffs":[[1,"        text.setText(\"Dead\")\n"]]},{"start1":19387,"length1":96,"diffs":[[1,""]]},{"start1":19475,"length1":0,"diffs":[[1,"    timer.after(500, function () {\n        sprites.destroy(text)\n    })\n"]]}]}]},{"timestamp":1754933232727,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":41669,"length1":40,"diffs":[[1,"        gems += Math.floor(difficulty / 10)\n"]]}]}]},{"timestamp":1754933252977,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5427,"length1":14,"diffs":[[1,"    [0, 0],\n"]]},{"start1":9184,"length1":60,"diffs":[[1,"addCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\n"]]},{"start1":9765,"length1":13,"diffs":[[1,"    gems = 1000\n"]]},{"start1":9829,"length1":85,"diffs":[[1,"    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n"]]},{"start1":10646,"length1":51,"diffs":[[1,"    } else {\n"]]},{"start1":10688,"length1":289,"diffs":[[1,""]]},{"start1":13644,"length1":34,"diffs":[[1,"function battle() {\n"]]},{"start1":37533,"length1":0,"diffs":[[1,"    game.splash(\"Battle Start!\")\n"]]},{"start1":41582,"length1":0,"diffs":[[1,"        game.splash(\"You won!\")\n"]]},{"start1":41669,"length1":43,"diffs":[[1,"        gems += Math.C(difficulty / 10)\n"]]},{"start1":42218,"length1":0,"diffs":[[1,"        game.splash(\"Defeat...\")\n"]]},{"start1":42304,"length1":0,"diffs":[[1,"// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n"]]}]}]},{"timestamp":1754933852036,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10014,"length1":22,"diffs":[[1,"        battle()\n"]]},{"start1":10812,"length1":21,"diffs":[[1,"        battle\n"]]},{"start1":34398,"length1":514,"diffs":[[1,"        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n"]]},{"start1":34876,"length1":45,"diffs":[[1,"    spawnEnemy()\n    startBattle()\n"]]},{"start1":34914,"length1":38,"diffs":[[1,"function spawnEnemy() {\n"]]},{"start1":36168,"length1":595,"diffs":[[1,"        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n"]]},{"start1":37878,"length1":39,"diffs":[[1,"function startBattle() {\n"]]},{"start1":38366,"length1":111,"diffs":[[1,"            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n"]]},{"start1":38806,"length1":110,"diffs":[[1,"            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n"]]},{"start1":39142,"length1":21,"diffs":[[1,"    endBattle()\n"]]},{"start1":39161,"length1":78,"diffs":[[1,"function dealDamage(attacker: Cubeling, defender: Cubeling) {\n"]]},{"start1":39433,"length1":318,"diffs":[[1,"    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth>(defender.maxHealth*3/4)?7:defender.currentHealth>(defender.maxHealth*2/4)?5:defender.currentHealth>(defender.maxHealth/4)?4:2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n"]]},{"start1":40294,"length1":735,"diffs":[[1,"    } else{\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n"]]},{"start1":40396,"length1":0,"diffs":[[1,"    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n"]]},{"start1":41804,"length1":37,"diffs":[[1,"function endBattle() {\n"]]},{"start1":42242,"length1":280,"diffs":[[1,"        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n"]]},{"start1":42349,"length1":116,"diffs":[[1,"        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n"]]}]}]},{"timestamp":1754934364333,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9828,"length1":74,"diffs":[[1,"    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"Quick Battle\", \"Reset Data\")\n"]]}]}]},{"timestamp":1754938392212,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9828,"length1":77,"diffs":[[1,"    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"M\", \"Reset Data\")\n"]]}]}]},{"timestamp":1754938393645,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":4393,"length1":0,"diffs":[[1,"                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n"]]},{"start1":9408,"length1":0,"diffs":[[1,"    console.log(data)\n"]]},{"start1":9828,"length1":63,"diffs":[[1,"    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\", \"Reset Data\")\n"]]},{"start1":10752,"length1":177,"diffs":[[1,"    } else if (story.getLastAnswer() == \"Quick Battle\"){\n        battle(true)\n    } else if (story.getLastAnswer() == \"Reset Data\"){\n        if(game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")){\n            settings.remove(\"data\")\n            game.reset()\n"]]},{"start1":11047,"length1":453,"diffs":[[1,""]]},{"start1":35121,"length1":132,"diffs":[[1,"    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n"]]},{"start1":40815,"length1":309,"diffs":[[1,""]]},{"start1":42517,"length1":23,"diffs":[[1,""]]},{"start1":42889,"length1":0,"diffs":[[1,"        else {game.splash(\"won round \" + difficulty);pause(1)}\n"]]}]}]},{"timestamp":1754938992879,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":35945,"length1":32,"diffs":[[1,""]]},{"start1":40923,"length1":283,"diffs":[[1,"        let fullAttacker = attacker.name + attacker.uid ? (\"#\" + attacker.uid) : \"\"\n        let fullDefender\n        console.log(fullAttacker + \" damaged \" + defender.name + defender.uid ? (\"#\" + defender.uid) : \"\")\n"]]},{"start1":42989,"length1":40,"diffs":[[1,""]]},{"start1":43306,"length1":72,"diffs":[[1,""]]}]}]},{"timestamp":1754940014123,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":35977,"length1":71,"diffs":[[1,"        let scaledDifficulty = difficulty - rarityMap[cub.rarity][0]\n"]]}]}]},{"timestamp":1754940024114,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":35945,"length1":0,"diffs":[[1,"        console.log(cub.rarity)\n"]]},{"start1":42781,"length1":124,"diffs":[[1,"        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.ceil(difficulty / 10)\n"]]},{"start1":43022,"length1":131,"diffs":[[1,"            if(!quick)\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n"]]},{"start1":43447,"length1":0,"diffs":[[1,"        } else {\n            game.splash(\"won round \" + (difficulty-1))\n"]]},{"start1":43610,"length1":76,"diffs":[[1,""]]}]}]},{"timestamp":1754940584709,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5178,"length1":34,"diffs":[[1,""]]},{"start1":9654,"length1":218,"diffs":[[1,""]]},{"start1":10658,"length1":84,"diffs":[[1,"        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Back\")\n"]]},{"start1":11162,"length1":235,"diffs":[[1,""]]},{"start1":42749,"length1":134,"diffs":[[1,"        money += Math.floor(Math.pow(difficulty, 0.5)/(quick?4:1))\n        gems += Math.ceil(difficulty / 10 / (quick?4:1))\n"]]}]}]},{"timestamp":1754941184514,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9485,"length1":32,"diffs":[[1,""]]},{"start1":11547,"length1":261,"diffs":[[1,"            if(simpleHash(code) == simpleHash(\"opLolGiga\")){\n                \n"]]},{"start1":42931,"length1":177,"diffs":[[1,"    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n"]]}]}]},{"timestamp":1754941736335,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5212,"length1":30,"diffs":[[1,""]]},{"start1":14955,"length1":44,"diffs":[[1,"    scene.setBackgroundImage(img`\n"]]},{"start1":35276,"length1":20425,"diffs":[[1,""]]},{"start1":39075,"length1":140,"diffs":[[1,""]]},{"start1":43469,"length1":51,"diffs":[[1,"        pause(700)\n"]]},{"start1":43622,"length1":25,"diffs":[[1,"        save()\n"]]}]}]},{"timestamp":1754942326918,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":59580,"length1":67,"diffs":[[1,"        enemyTeam.forEach(v=>quickBar.max+=v.maxHealth)\n"]]},{"start1":62529,"length1":33,"diffs":[[1,""]]},{"start1":62592,"length1":18,"diffs":[[1,"        pause(1)\n"]]},{"start1":64074,"length1":28,"diffs":[[1,"        if(quick) pause(1)\n"]]}]}]},{"timestamp":1754949829480,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":59580,"length1":68,"diffs":[[1,"        enemyTeam.forEach(v=>{quickBar.max+=v.maxHealth;pause(1)})\n"]]}]}]},{"timestamp":1754949885043,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":5212,"length1":0,"diffs":[[1,"let quickBar: StatusBarSprite\n"]]},{"start1":10177,"length1":17,"diffs":[[1,"        battle(false)\n"]]},{"start1":11177,"length1":26,"diffs":[[1,"            battle(true)\n"]]},{"start1":14951,"length1":54,"diffs":[[1,"function battle(quick: boolean) {\n    if(!quick)scene.setBackgroundImage(img`\n"]]},{"start1":35316,"length1":0,"diffs":[[1,"    else{ scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999111199999999999999999999999999999999999999999999999999999999999999999999999999999911119999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119999999999999999999999999999999999999999999999999999999999999999999999999999111111999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119911999999999999999999999999999999999999999999999999999999999999999999999999111111991199999999999999999999999999999999999999999999999\n        9999999999999999991111111119111119999999999999999999999999999999999999999999999999999999999999999999111111111911111999999999999999999999999999999999999999999999\n        9999999999999999911111111111111119999999999999999999999999999999999999999999999999999999999999999991111111111111111999999999999999999999999999999999999999999999\n        9999999999999999111111111111111111199999999999999999999999999999999999999999999999999999999999999911111111111111111119999999999999999999999999999999999999999999\n        9999999999999999111111111111111111119999999999999999999999999999999999999999999999999999999999999911111111111111111111999999999999999999999999999999999999999999\n        9999999999999999911111111111111111119991199999999999999999999999999999999999999999999999999999999991111111111111111111999119999999999999999999999999999999999999\n        9999999999999111191111111111111111119911111999999999999999999999999999999999999999999999999999911119111111111111111111991111199999999999999999999999999999999999\n        9999999999991111119111111111111111199911111999999999999999999999999999999999999999999999999999111111911111111111111119991111199999999999999999999999999999999999\n        9999999999991111111111111111111111911111111199999999999999999999999999999999999999999999999999111111111111111111111191111111119999999999999999999999999999999999\n        9999999999991111111111111111111111111111111199999999999999999999999999999999999999999999999999111111111111111111111111111111119999999999999999999999999999999999\n        9999999999999111111111111111111111111111111199999999999999999999999999999999999999999999999999911111111111111111111111111111119999999999999999999999999999999999\n        9911199991111911111111111111111111111111111991199999999999991111999999999999999999991119999111191111111111111111111111111111199119999999999999111199999999999999\n        9111119911111111111111111111111111111111111911119999999999911111199999999999999999911111991111111111111111111111111111111111191111999999999991111119999999999999\n        9111119111111111111111111111111111111111111911119999999999911111191119999999999999911111911111111111111111111111111111111111191111999999999991111119111999999999\n        9911111111111111111111111111111111111111111111119999999999999111111111999999999999991111111111111111111111111111111111111111111111999999999999911111111199999999\n        9111111111111111111111111111111111111111111111199999999911119111111111999999999999911111111111111111111111111111111111111111111119999999991111911111111199999999\n        1111111111111111111111111111111111111111111111119999999111111111111119999999999199111111111dd1111111111111111111111111111111111111999999911111111111111999999999\n        1111111111111111111111111111111111111111111111111911199111111111111111111999999ddd111111111ddd111111111111111111111111111111111111191119911111111111111111199999\n        1111111111111111111111111111111111111111111111111111111111111111111111111199991ddd111111111ddd111111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111111111111111111111111111111111111999ddddddd111111ddddd11111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        1111111111111111111ddd1111111111111111111d11dddddd111111111111111111111111111d11dddd11111ddddddd11111111111111111111dd1111111111111111111dd1d1ddddd1111111111111\n        111111111111111111ddddd111111111111111111ddddddd1d111111111111111111111111111ddddddd11111ddddddd1111111111111111111dddd111111111111111111dddddd11dd1111111111111\n        11111111111111111dddddd111111111111111111ddddddddd1111111111d11111111ddddd111d1ddddd11111ddddddd11111111111111111dddddd111111111111111111dddddddddd1111111111111\n        11111111111111111ddd1d111111d111111111111ddddddddd111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111ddd1d111111dd11111111111dddd1ddddd11111111dd111\n        11111111111111111dddddd11111d111111111111ddddddd1d111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111dddddd11111dd11111111111ddddddd1dd11111111dd111\n        11111111ddd111111dd11d11111ddd11111111111ddddddddd11dddddd1dd11111111ddddd111ddddddd11111ddddddd111111111dd111111ddd1d11111ddd11111111111dddddddddd1ddddddddd111\n        d1dd1111ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd111111111dd1dd11ddddddd111dddddddddd1dd1111ddddddddddddd1d1111dddd1111111111dddddd11dd1d11dddddd111\n        dddd11111d1dd1ddddddddd111ddddd1111111111ddddddddd11dddd1d1dd11111111dddddd11dd1dddd111ddddddddddddd1111dd1ddd1dddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dd1d11111ddd1111ddddddd111ddddd1111111111ddddddddd11dddd1dddd11111111dddddd11ddddddd111ddddddddddd1d1111dddd1d11ddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dddd1111dddddddddddddddd11dddddd11dd1dd1ddddddddddd1d11dddddd11111111dddddd11ddddddd111ddddddddddddd1111dddddddddddddddd11dddddd111d11ddddddddddddd1d11dddddd111\n        dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11dddddd11ddddddd111ddddddddddd1d1111dddddddddddddddd11dddddd111dddddddddddddddd1ddddddddd111\n        ddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd11bbddddddd1ddd11dd1dd11ddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddbddddddd11bbbddd1dd\n        ddddd1dddddddddddddddddddd1dddddd1dddddddddbbbdddddddddbbbdddddd1ddd1dddddd11ddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbddd1dd\n        ddddd1ddddddddddddddddddddddddddd1dddddddddbbbdddddddddbbbdddddddddddddddddddddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbdddddd\n        ddddd1ddddddddddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddd1dddddddddddddddddddddddddd1d1ddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbddbbbbbbddddddddddddddddddd1dddddddbddbbbbdddddbbbbbbbdd111dddddddddddddddbbdddd1ddddddddddddddbbdbdbbbbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbdbddddddddddddddddddd1dddddddbbbbbbbdddddbbbbbbbddd11ddddddddddddddbbbbddd1ddddddddddddddbbbbbbddbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbddddddddddbddddddddbbbbbdddbdbbbbbdddddbbbbbbbddddddddddd1dddddbbbbbbddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddddbbbbddddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd1ddddddddddddddbbbdbddddddbbdddddddddddbbbbdbbbbbddddddddbbdddddddddbbbbddddbbbdbbbddddbbbbbbbbd1d\n        dddddbbbbbbbdbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd111ddddddddddddbbbbbbdddddbbdddddddddddbbbbbbbdbbddddddddbbddddddddbbbbbbdddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbbbddbbbbbbdbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdddddddddbb1dddddbbbdbdddddbbbdddddddddddbbbbbbbbbbdbbbbbbbbbddddddddbbbbbbdddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbdbddbddbbbdbbdddddddddbbdbbddbbbbbbbdddbbbbbbbbbbdbbddddbbbbbbbbbbbbbdbddddbbbbddddddddddbbbbbbddbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbdbbddddddddbbbbbbddbbdbbbbdddbbbbbbbbbbbbbddddbbdbbbdbbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbdbddbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dbbdbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbbbddddbbbbbbbbbbbbbbbbddbbbbbbdddbddbbbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbdbbbbbbbbbddbddbddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbbbbbbbbbbbbbddbbbbbbdddbbbbbbbbbbbbbbbbdbbbbbbbbbdddddbddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbddbbbbbbbbbbbbbddddbbbbbbbdbbbddbbdbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbdbbbbbbbbbbbbbddbbbbbbbdddbddbbbbbbbbbbbbbbddbdbbbbdbbdbbbdbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbdbbbbbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbdbbbbbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbb\n        bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7\n        bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77\n        bb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777b\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n    `)\n    quickBar = statusbars.create(100, 20, StatusBarKind.Magic)\n    quickBar.setColor(6, 12)\n    }\n"]]},{"start1":55784,"length1":444,"diffs":[[1,"        if(!quick){\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n"]]},{"start1":56332,"length1":35,"diffs":[[1,"    spawnEnemy(quick)\n    startBattle(quick)\n"]]},{"start1":56380,"length1":24,"diffs":[[1,"function spawnEnemy(quick: boolean) {\n"]]},{"start1":57543,"length1":517,"diffs":[[1,"        if(!quick){\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n"]]},{"start1":59331,"length1":25,"diffs":[[1,"function startBattle(quick: boolean) {\n"]]},{"start1":59540,"length1":0,"diffs":[[1,"    if(quick){\n        quickBar.max = 0\n        enemyTeam.forEach(v=>{quickBar.max+=v.maxHealth;pause(10)})\n        quickBar.value = quickBar.max\n    }\n"]]},{"start1":59985,"length1":104,"diffs":[[1,"            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n"]]},{"start1":60432,"length1":103,"diffs":[[1,"            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n"]]},{"start1":60775,"length1":16,"diffs":[[1,"    endBattle(quick)\n"]]},{"start1":60799,"length1":62,"diffs":[[1,"function dealDamage(attacker: Cubeling, defender: Cubeling, quick: boolean) {\n"]]},{"start1":61087,"length1":784,"diffs":[[1,"    if(!quick){\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n"]]},{"start1":61510,"length1":0,"diffs":[[1,"        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n"]]},{"start1":62258,"length1":84,"diffs":[[1,"        /*let fullAttacker = attacker.uid ? (attacker.name + \"#\" + attacker.uid) : (\"enemy \" + attacker.name)\n        let fullDefender = defender.uid ? (defender.name + \"#\" + defender.uid) : (\"enemy \" + defender.name)\n        console.log(fullAttacker + \" damaged \" + fullDefender)*/\n        quickBar.value -= damage\n        if (defender.currentHealth <= 0)defender.alive = false\n        pause(10)\n"]]},{"start1":62661,"length1":82,"diffs":[[1,""]]},{"start1":64010,"length1":23,"diffs":[[1,"function endBattle(quick: boolean) {\n"]]},{"start1":64120,"length1":132,"diffs":[[1,"        if(quick) pause(10)\n        else pause(700)\n        money += Math.ceil(difficulty / 10 / (quick ? 4 : 1))\n        gems += Math.floor(Math.pow(difficulty, 0.5) / (quick ? 4 : 1))\n        if(!quick)save()\n"]]},{"start1":64459,"length1":85,"diffs":[[1,"            if(!quick){\n                c.health.value = c.currentHealth\n                c.health.setColor(7, 12, 3)\n            }\n"]]},{"start1":64627,"length1":97,"diffs":[[1,"        if(!quick){\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n"]]},{"start1":64917,"length1":164,"diffs":[[1,"        spawnEnemy(quick)\n        startBattle(quick)\n"]]},{"start1":64998,"length1":0,"diffs":[[1,"        if(quick)game.setGameOverMessage(false, \"Lost round \" + difficulty)\n"]]}]}]},{"timestamp":1754950455950,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":38653,"length1":232,"diffs":[[1,""]]}]}]},{"timestamp":1754951054997,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":38677,"length1":2514,"diffs":[[1,"    en\n    let totalPlayerStats = {attack: 0, health: 0, defense: 0}\n    playerTeam.forEach(v=>{totalPlayerStats.attack+=v.attack;totalPlayerStats.health+=v.maxHealth;totalPlayerStats.defense+=v.defense})\n"]]}]}]},{"timestamp":1754951649883,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":11142,"length1":26,"diffs":[[1,"            //quickBattle\n"]]},{"start1":38804,"length1":36,"diffs":[[1,""]]},{"start1":41069,"length1":226,"diffs":[[1,"            money += Math.ceil(difficulty / 10)\n            gems += Math.floor(Math.pow(difficulty, 0.5))\n"]]},{"start1":41191,"length1":118,"diffs":[[1,""]]}]}]},{"timestamp":1754952247632,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\"){\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Quick Battle\"){\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\"){\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\"){\n            let code = game.askForString(\"Code\", 20, false)\n            if (simpleHash(code) == 872877828&&activatedCodes.indexOf(code)==-1){\n                activatedCodes.push(code)\n                ownedCubelings.push(new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true))\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\"){\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] )\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity-1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle(){\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while(totalPlayerStats.health>0){\n        if(difficulty == 1){\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if(totalPlayerStats.health>0){\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.setGameOverMessage(false, \"Money: \" + inMon + \", Gems: \" + inGem + \", \")\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":26,"diffs":[[1,"    \"name\": \"rogue #2 - Copy\",\n"]]},{"start1":629,"length1":42,"diffs":[[1,"        \"tilemap.g.ts\"\n"]]}]},{"type":"added","filename":"game.ts","value":"namespace rogueCubes{\n// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nexport let costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\nexport let codes: {[hash: number]: ()=>Cubeling} = {\n    872877828: ()=>new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true)\n}\n\nexport function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nexport function startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n}"}]},{"timestamp":1754952766447,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":23,"diffs":[[1,""]]}]},{"type":"edited","filename":"game.ts","patch":[{"start1":367,"length1":54,"diffs":[[1,"        uidCount: boolean\n"]]},{"start1":736,"length1":167,"diffs":[[1,"        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n"]]},{"start1":8620,"length1":19,"diffs":[[1,""]]},{"start1":8686,"length1":1,"diffs":[[1,""]]},{"start1":8739,"length1":137,"diffs":[[1,"    872877828: ()=>new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true)\n"]]},{"start1":9022,"length1":142,"diffs":[[1,"    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n"]]},{"start1":44708,"length1":24,"diffs":[[1,""]]},{"start1":45023,"length1":147,"diffs":[[1,"        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n"]]}]}]},{"timestamp":1754953341874,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":19,"diffs":[[1,"rogueCubes.startGame()\n"]]}]},{"type":"edited","filename":"game.ts","patch":[{"start1":5414,"length1":14,"diffs":[[1,""]]},{"start1":8797,"length1":137,"diffs":[[1,"    872877828: ()=>{id++;return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, id)}\n"]]},{"start1":8937,"length1":295,"diffs":[[1,"export function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n"]]},{"start1":9107,"length1":0,"diffs":[[1,"    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\n"]]},{"start1":9243,"length1":350,"diffs":[[1,"addCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n"]]},{"start1":9538,"length1":901,"diffs":[[1,"if (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n"]]},{"start1":10019,"length1":55,"diffs":[[1,""]]},{"start1":10259,"length1":23,"diffs":[[1,"export function startGame() {\n"]]},{"start1":36168,"length1":145,"diffs":[[1,"    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n"]]},{"start1":39305,"length1":161,"diffs":[[1,"        const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n"]]}]}]},{"timestamp":1754953870291,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":208,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":47792,"diffs":[[1,"rogueCubes.start()\n"]]}]},{"type":"edited","filename":"game.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"namespace rogueCubes{\n// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean,\n        public rid: number\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nexport let costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\nexport let id = 0\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nexport let codes: {[hash: number]: ()=>Cubeling} = {\n    872877828: ()=>{id++;return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, -1)}\n}\n\nfunction addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\n    id++\n}\n\nexport function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number){\n    addCubelingInternal(name, costume, maxHealth, attack, defense, ability, speed, rarity)\n    rarityMap.push([minAppearance, maxAppearance])\n}\n\naddCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\n\nfunction load(){\n    if (settings.readJSON(\"data\") != null) {\n        let data = JSON.parse(settings.readString(\"data\"))\n        playerTeam = jsonToCubelings(data.team, false)\n        ownedCubelings = jsonToCubelings(data.owned, true)\n        money = data.money\n        gems = data.gems\n        activatedCodes = data.codes\n    } else {\n        playerTeam = [\n            cubelingPool[0].dupe(true),\n            cubelingPool[0].dupe(true),\n            cubelingPool[0].dupe(true)\n        ]\n        ownedCubelings = playerTeam\n        money = 0\n        gems = 0\n    }\n}\n\nexport function start(){\n    load()\n    startGame()\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= (c.rid>=0?rarityMap[c.rid][0]:-1) && difficulty <= (c.rid>=0?rarityMap[c.rid][1]:-1))\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            rid: i.rid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n}"]]}]}]},{"timestamp":1754954478468,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":47791,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754954479771,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":8060,"diffs":[[1,"\n// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean,\n        public rid: number\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\nlet id = 0\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nlet codes: { [hash: number]: () => Cubeling } = {\n    872877828: () => { id++; return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, -1) }\n}\n\nfunction addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\n    id++\n}\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\n    addCubelingInternal(name, costume, maxHealth, attack, defense, ability, speed, rarity)\n    rarityMap.push([minAppearance, maxAppearance])\n}\n\naddCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nconsole.log(\"started loading\")\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            rid: i.rid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":648,"length1":39,"diffs":[[1,"        \"game.ts\"\n"]]}]},{"type":"removed","filename":"game.ts","value":""},{"type":"added","filename":"menu.ts","value":"function openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n"},{"type":"added","filename":"battle.ts","value":"function battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n"}]},{"timestamp":1754955064723,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":54,"diffs":[[1,""]]},{"start1":6432,"length1":15,"diffs":[[1,"startGame()\r\n"]]},{"start1":8060,"length1":2,"diffs":[[1,""]]}]},{"type":"edited","filename":"menu.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"function openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n"]]}]},{"type":"edited","filename":"battle.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"function battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n"]]}]}]},{"timestamp":1754955216118,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":2,"diffs":[[1,""]]},{"start1":27,"length1":0,"diffs":[[1,"console.log(\"is working\")\r\n"]]}]}]},{"timestamp":1754959603160,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"\r\n"]]}]}]},{"timestamp":1754959666823,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"console.log(\"is working\")\r\n// === Global Game State ===\r\nlet playerTeam: Cubeling[] = []\r\nlet ownedCubelings: Cubeling[] = []\r\nlet enemyTeam: Cubeling[] = []\r\nlet activatedCodes: string[] = []\r\nlet money = 0\r\nlet gems = 500\r\nlet difficulty = 1\r\nlet uid = 0\r\nlet teamMenuOpen = false\r\nlet rarityMap: number[][] = [\r\n    [1, 20],\r\n    [4, 100],\r\n    [4, 100],\r\n    [7, 500],\r\n    [10, Infinity]\r\n]\r\ntiles.setCurrentTilemap(tilemap`level1`)\r\n\r\nlet costumes: { [key: string]: Image } = {\r\n    Fire: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Water: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Earth: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Basic: img`\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n    `,\r\n    Lightning: img`\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n    `,\r\n}\r\n\r\nlet id = 0\r\n\r\n// === Sample Cubeling Pool ===\r\nlet cubelingPool: Cubeling[] = []\r\n\r\nlet codes: { [hash: number]: () => Cubeling } = {\r\n    872877828: () => { id++; return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, -1) }\r\n}\r\n// === Cubeling Definition ===\r\nclass Cubeling {\r\n    constructor(\r\n        public name: string,\r\n        public costume: string,\r\n        public maxHealth: number,\r\n        public attack: number,\r\n        public defense: number,\r\n        public ability: string,\r\n        public speed: number,\r\n        public image: Image,\r\n        public rarity: number,\r\n        uidCount: boolean,\r\n        public rid: number\r\n    ) {\r\n        this.currentHealth = maxHealth\r\n        this.uid = uid\r\n        if (uidCount) uid++\r\n    }\r\n    currentHealth: number\r\n    sprite: Sprite\r\n    alive: boolean = true\r\n    uid: number\r\n    health: StatusBarSprite\r\n    upgradesDamage: number = 1\r\n    upgradesHealth: number = 1\r\n    upgradesDefense: number = 1\r\n    dupe(uidCount: boolean) {\r\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\r\n    }\r\n}\r\n\r\nfunction addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\r\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\r\n    id++\r\n}\r\n\r\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\r\n    addCubelingInternal(name, costume, maxHealth, attack, defense, ability, speed, rarity)\r\n    rarityMap.push([minAppearance, maxAppearance])\r\n}\r\n\r\naddCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\r\naddCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\r\naddCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\r\naddCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\r\naddCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\r\n\r\nconsole.log(\"started loading\")\r\nif (settings.readJSON(\"data\") != null) {\r\n    let data = JSON.parse(settings.readString(\"data\"))\r\n    playerTeam = jsonToCubelings(data.team, false)\r\n    ownedCubelings = jsonToCubelings(data.owned, true)\r\n    money = data.money\r\n    gems = data.gems\r\n    activatedCodes = data.codes\r\n} else {\r\n    playerTeam = [\r\n        cubelingPool[0].dupe(true),\r\n        cubelingPool[0].dupe(true),\r\n        cubelingPool[0].dupe(true)\r\n    ]\r\n    ownedCubelings = playerTeam\r\n    money = 0\r\n    gems = 0\r\n}\r\n\r\n//startGame()\r\n\r\nfunction simpleHash(str: string): number {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\r\n        hash |= 0 // force 32-bit\r\n    }\r\n    return hash\r\n}\r\n\r\n\r\n\r\nfunction cubelingsToJSON(cublings: Cubeling[]) {\r\n    let end: { [key: string]: any }[] = []\r\n    for (let i of cublings) {\r\n        end.push({\r\n            name: i.name,\r\n            costume: i.costume,\r\n            maxHealth: i.maxHealth,\r\n            attack: i.attack,\r\n            defense: i.defense,\r\n            ability: i.ability,\r\n            speed: i.speed,\r\n            rarity: i.rarity,\r\n            uid: i.uid,\r\n            rid: i.rid,\r\n            upgradesDamage: i.upgradesDamage,\r\n            upgradesHealth: i.upgradesHealth,\r\n            upgradesDefense: i.upgradesDefense\r\n        })\r\n    }\r\n    return end\r\n}\r\n\r\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\r\n    let end: Cubeling[] = []\r\n    for (let i of cublings) {\r\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\r\n        n.uid = i.uid\r\n        if (uidCount) uid = Math.max(uid, i.uid)\r\n        n.upgradesDamage = i.upgradesDamage\r\n        n.upgradesHealth = i.upgradesHealth\r\n        n.upgradesDefense = i.upgradesDefense\r\n        end.push(n)\r\n    }\r\n    return end\r\n}\r\n\r\nfunction save() {\r\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\r\n}\r\n\r\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":667,"length1":38,"diffs":[[1,"        \"battle.ts\"\n"]]}]},{"type":"edited","filename":"menu.ts","patch":[{"start1":0,"length1":10110,"diffs":[[1,""]]}]},{"type":"edited","filename":"battle.ts","patch":[{"start1":0,"length1":30485,"diffs":[[1,""]]}]},{"type":"added","filename":"ext.ts","value":"namespace rogue\n"}]},{"timestamp":1754960266820,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":648,"length1":0,"diffs":[[1,"        \"menu.ts\",\n        \"battle.ts\",\n"]]}]},{"type":"edited","filename":"ext.ts","patch":[{"start1":0,"length1":50557,"diffs":[[1,"namespace rogue\n"]]}]},{"type":"removed","filename":"menu.ts","value":"function openTeamSelectMenu() {\r\n    teamMenuOpen = true\r\n    let page = 0\r\n    let selected: Cubeling[] = []\r\n    for (let i = 0; i < ownedCubelings.length; i++) {\r\n        if (i < 70) {\r\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\r\n            let row = Math.floor(i / 10)\r\n            let column = i % 10\r\n            grid.place(newSprite, tiles.getTileLocation(column, row))\r\n        }\r\n    }\r\n    let mySprite = sprites.create(img`\r\n        5 5 5 5 . . . . . . . . 5 5 5 5\r\n        5 . . . . . . . . . . . . . . 5\r\n        5 . . . . . . . . . . . . . . 5\r\n        5 . . . . . . . . . . . . . . 5\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        5 . . . . . . . . . . . . . . 5\r\n        5 . . . . . . . . . . . . . . 5\r\n        5 . . . . . . . . . . . . . . 5\r\n        5 5 5 5 . . . . . . . . 5 5 5 5\r\n    `, SpriteKind.Player)\r\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\r\n    grid.moveWithButtons(mySprite)\r\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\r\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\r\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\r\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\r\n            for (let i = 0; i < curLings.length; i++) {\r\n                if (i < 70) {\r\n                    let newSprite = sprites.create(curLings[i].image)\r\n                    let row = Math.floor(i / 10)\r\n                    let column = i % 10\r\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\r\n                }\r\n            }\r\n        } else if (grid.spriteCol(mySprite) < 9) {\r\n            grid.move(mySprite, 1, 0)\r\n        }\r\n    })\r\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\r\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\r\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\r\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\r\n                selected.push(ownedCubelings[hovered])\r\n                let selectedIndicator = sprites.create(img`\r\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 . . . . . . . . . . . . . . 3\r\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n                `, SpriteKind.Food)\r\n                selectedIndicator.z = mySprite.z - 1\r\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\r\n                if (selected.length == 3) {\r\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\r\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\r\n                    sprites.destroy(mySprite)\r\n                    playerTeam = selected\r\n                    startGame()\r\n                }\r\n            } else {\r\n                selected.removeElement(ownedCubelings[hovered])\r\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n// === Start Game ===\r\nfunction startGame() {\r\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\r\n    while (story.isMenuOpen()) {\r\n        pause(1)\r\n    }\r\n    if (story.getLastAnswer() == \"Battle\") {\r\n        battle()\r\n    } else if (story.getLastAnswer() == \"Shop\") {\r\n        let textSprite = textsprite.create(money.toString())\r\n        textSprite.setIcon(img`\r\n            . 5 5 5 .\r\n            5 4 5 5 5\r\n            5 5 4 5 5\r\n            5 4 4 4 5\r\n            . 5 5 5 .\r\n        `)\r\n        textSprite.y = 30\r\n        textSprite.x = 80\r\n        let textSprite2 = textsprite.create(gems.toString())\r\n        textSprite2.setIcon(img`\r\n            . . . . .\r\n            9 9 9 9 9\r\n            . 9 9 9 .\r\n            . . 9 . .\r\n            . . . . .\r\n        `)\r\n        textSprite2.y = 19\r\n        textSprite2.x = 80\r\n        pause(1)\r\n        shopping(textSprite, textSprite2)\r\n    } else if (story.getLastAnswer() == \"Equip\") {\r\n        openTeamSelectMenu()\r\n    } else if (story.getLastAnswer() == \"More\") {\r\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\r\n        while (story.isMenuOpen()) {\r\n            pause(1)\r\n        }\r\n        if (story.getLastAnswer() == \"Quick Battle\") {\r\n            quickBattle()\r\n        } else if (story.getLastAnswer() == \"Reset Data\") {\r\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\r\n                settings.remove(\"data\")\r\n                game.reset()\r\n            } else {\r\n                startGame()\r\n            }\r\n        } else if (story.getLastAnswer() == \"Enter Code\") {\r\n            let code = game.askForString(\"Code\", 20, false)\r\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\r\n                activatedCodes.push(code)\r\n                ownedCubelings.push(codes[simpleHash(code)].dupe(true))\r\n            }\r\n            startGame()\r\n        } else if (story.getLastAnswer() == \"Back\") {\r\n            startGame()\r\n        }\r\n    }\r\n}\r\n\r\nfunction shopping(mone: TextSprite, jems: TextSprite) {\r\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\r\n    while (story.isMenuOpen()) {\r\n        pause(1)\r\n    }\r\n    if (story.getLastAnswer() == \"Recruit\") {\r\n        recruitCubeling(mone, jems)\r\n    } else if (story.getLastAnswer() == \"Upgrade\") {\r\n        selectUpgrades(mone, jems)\r\n    } else {\r\n        sprites.destroy(mone)\r\n        sprites.destroy(jems)\r\n        startGame()\r\n    }\r\n}\r\n\r\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\r\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\r\n    while (story.isMenuOpen()) {\r\n        pause(1)\r\n    }\r\n    let ansInx: number\r\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\r\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\r\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\r\n    else shopping(mone, jems)\r\n    upgrades(ansInx, mone, jems)\r\n}\r\n\r\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\r\n    let teamAns = playerTeam[ansInx]\r\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\r\n    story.showPlayerChoices(\r\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\r\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\r\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\r\n        \"Back\"\r\n    )\r\n    while (story.isMenuOpen()) {\r\n        pause(1)\r\n    }\r\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\r\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\r\n            money -= moneyCalc(teamAns.upgradesDamage)\r\n            teamAns.upgradesDamage++\r\n            teamAns.attack += 5\r\n            mone.setText(money + \"\")\r\n        }\r\n        upgrades(ansInx, mone, jems)\r\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\r\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\r\n            money -= moneyCalc(teamAns.upgradesHealth)\r\n            teamAns.upgradesHealth++\r\n            teamAns.maxHealth += 10\r\n            teamAns.currentHealth = teamAns.maxHealth\r\n            mone.setText(money + \"\")\r\n        }\r\n        upgrades(ansInx, mone, jems)\r\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\r\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\r\n            money -= moneyCalc(teamAns.upgradesDefense)\r\n            teamAns.upgradesDefense++\r\n            teamAns.defense += 5\r\n            mone.setText(money + \"\")\r\n        }\r\n        upgrades(ansInx, mone, jems)\r\n    } else {\r\n        selectUpgrades(mone, jems)\r\n    }\r\n}\r\n\r\n// === Recruit Menu ===\r\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\r\n    if (gems < 500) {\r\n        game.splash(\"Not enough gems!\")\r\n        shopping(mone, jems)\r\n        return\r\n    }\r\n\r\n    gems -= 500\r\n\r\n    // Build weighted list dynamically\r\n    let weightedList: Cubeling[] = []\r\n    for (let c of cubelingPool) {\r\n        let weight = 1 / c.rarity\r\n        let count = Math.round(weight * 100) // Scale for precision\r\n        for (let i = 0; i < count; i++) {\r\n            weightedList.push(c)\r\n        }\r\n    }\r\n\r\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\r\n    ownedCubelings.push(selected)\r\n\r\n    game.splash(`Recruited ${selected.name}!`)\r\n    jems.setText(gems.toString())\r\n    jems.x = 80\r\n    shopping(mone, jems)\r\n}"},{"type":"removed","filename":"battle.ts","value":"function battle() {\r\n    scene.setBackgroundImage(img`\r\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\r\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\r\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\r\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\r\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\r\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\r\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\r\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\r\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\r\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\r\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\r\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\r\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\r\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\r\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\r\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\r\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\r\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\r\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\r\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\r\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\r\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\r\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\r\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\r\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\r\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\r\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\r\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n    `)\r\n    playerTeam.forEach((value, index) => {\r\n        value.sprite = sprites.create(value.image)\r\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\r\n        statusbar.setColor(7, 12, 3)\r\n        statusbar.max = value.maxHealth\r\n        statusbar.value = value.currentHealth\r\n        value.health = statusbar\r\n        value.sprite.x = 62\r\n        value.sprite.y = 60 + (18 * index) - 18\r\n        value.health.x = value.sprite.x\r\n        value.health.y = value.sprite.y - 10\r\n        value.alive = true\r\n    })\r\n    spawnEnemy()\r\n    startBattle()\r\n}\r\n\r\nfunction spawnEnemy() {\r\n    enemyTeam = []\r\n\r\n    // Filter based on allowed rarities (difficulty gates access)\r\n    const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\r\n\r\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\r\n    const weightedPool: Cubeling[] = []\r\n    for (const cub of allowed) {\r\n        const weight = 1 / cub.rarity\r\n        const entries = Math.round(weight * 100) // scale to 100 for precision\r\n        for (let i = 0; i < entries; i++) {\r\n            weightedPool.push(cub)\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        const base = pickCubelingFromPool()\r\n        const cub = base.dupe(false)\r\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\r\n        // Scale stats based on difficulty\r\n        cub.maxHealth += (scaledDifficulty * 5) - 10\r\n        cub.currentHealth = cub.maxHealth\r\n        cub.attack += (scaledDifficulty * 2) - 4\r\n        cub.defense += scaledDifficulty - 2\r\n        enemyTeam.push(cub)\r\n    }\r\n\r\n    // Create sprites and health bars\r\n    enemyTeam.forEach((value, index) => {\r\n        const image = value.image.clone()\r\n        image.flipX()\r\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\r\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\r\n        statusbar.setColor(7, 12, 3)\r\n        statusbar.max = value.maxHealth\r\n        statusbar.value = value.currentHealth\r\n        value.health = statusbar\r\n        value.sprite.x = 98\r\n        value.sprite.y = 60 + (18 * index) - 18\r\n        value.health.x = value.sprite.x\r\n        value.health.y = value.sprite.y - 10\r\n    })\r\n}\r\n\r\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\r\n    let rarity = cub.rarity\r\n    let minDiff = rarityMap[rarity - 1][0]\r\n    let maxDiff = rarityMap[rarity - 1][1]\r\n\r\n    // Outside allowed range → 0 weight\r\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\r\n\r\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\r\n    // Low% at minDiff, ramps up to 100% at maxDiff\r\n    let lowPercent = 0.1 // you can tweak this\r\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\r\n\r\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\r\n    let weight = lowPercent + t * (1 - lowPercent)\r\n\r\n    return weight\r\n}\r\n\r\nfunction pickCubelingFromPool(): Cubeling {\r\n    let weights: number[] = []\r\n    let totalWeight = 0\r\n    for (let cub of cubelingPool) {\r\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\r\n        weights.push(w)\r\n        totalWeight += w\r\n    }\r\n\r\n    let r = Math.random() * totalWeight\r\n    let acc = 0\r\n    for (let i = 0; i < cubelingPool.length; i++) {\r\n        acc += weights[i]\r\n        if (r < acc) return cubelingPool[i]\r\n    }\r\n    return cubelingPool[0] // fallback\r\n}\r\n\r\nfunction quickBattle() {\r\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\r\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\r\n    let inMon = 0\r\n    let inGem = 0\r\n    while (totalPlayerStats.health > 0) {\r\n        if (difficulty == 1) {\r\n            totalPlayerStats.health -= 1\r\n        }\r\n        enemyTeam = []\r\n\r\n        // Filter based on allowed rarities (difficulty gates access)\r\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\r\n\r\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\r\n        const weightedPool: Cubeling[] = []\r\n        for (const cub of allowed) {\r\n            const weight = 1 / cub.rarity\r\n            const entries = Math.round(weight * 100) // scale to 100 for precision\r\n            for (let i = 0; i < entries; i++) {\r\n                weightedPool.push(cub)\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const base = pickCubelingFromPool()\r\n            const cub = base.dupe(false)\r\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\r\n            // Scale stats based on difficulty\r\n            cub.maxHealth += (scaledDifficulty * 5) - 10\r\n            cub.currentHealth = cub.maxHealth\r\n            cub.attack += (scaledDifficulty * 2) - 4\r\n            cub.defense += scaledDifficulty - 2\r\n            enemyTeam.push(cub)\r\n        }\r\n\r\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\r\n\r\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\r\n        let playerTurn = false\r\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\r\n            if (playerTurn) {\r\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\r\n            } else {\r\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\r\n            }\r\n            playerTurn = !playerTurn\r\n        }\r\n        if (totalPlayerStats.health > 0) {\r\n            difficulty++\r\n            money += Math.ceil(difficulty / 100)\r\n            inMon += Math.ceil(difficulty / 10)\r\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\r\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\r\n        }\r\n    }\r\n    save()\r\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\r\n    game.reset()\r\n}\r\n\r\n// === Battle Loop ===\r\nfunction startBattle() {\r\n    let playerTurn = true\r\n    let playerIndex = 0\r\n    let enemyIndex = 0\r\n    playerTeam.sort((a, b) => b.speed - a.speed)\r\n    enemyTeam.sort((a, b) => b.speed - a.speed)\r\n    // Simplified Turn-Based System (one Cubeling each)\r\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\r\n        if (playerTurn) {\r\n            let aliveDefender = enemyTeam.filter(val => val.alive)\r\n            let aliveAttacker = playerTeam.filter(val => val.alive)\r\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\r\n            aliveDefender = enemyTeam.filter(val => val.alive)\r\n            playerIndex++\r\n            playerIndex %= aliveAttacker.length\r\n            enemyIndex %= aliveDefender.length\r\n        } else {\r\n            let aliveDefender = playerTeam.filter(val => val.alive)\r\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\r\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\r\n            aliveDefender = playerTeam.filter(val => val.alive)\r\n            enemyIndex++\r\n            enemyIndex %= aliveAttacker.length\r\n            playerIndex %= aliveDefender.length\r\n        }\r\n        playerTurn = !playerTurn\r\n    }\r\n    endBattle()\r\n}\r\n\r\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\r\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\r\n    if (damage < 0) damage = 0\r\n    defender.currentHealth -= damage\r\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\r\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\r\n    let text = textsprite.create(\"-\" + damage, 0, 2)\r\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\r\n    text.y = defender.sprite.y\r\n    defender.health.value = defender.currentHealth\r\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\r\n    if (defender.currentHealth <= 0) {\r\n        defender.alive = false\r\n        text.setText(\"X\")\r\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\r\n    } else {\r\n        timer.after(500, function () {\r\n            sprites.destroy(text)\r\n        })\r\n    }\r\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\r\n}\r\n\r\n// === End Battle and Reward ===\r\nfunction endBattle() {\r\n    let playerWins = !enemyTeam.some(v => v.alive)\r\n    if (playerWins) {\r\n        pause(700)\r\n        money += Math.ceil(difficulty / 10)\r\n        gems += Math.floor(Math.pow(difficulty, 0.5))\r\n        save()\r\n        difficulty += 1\r\n        // Heal Cubelings\r\n        for (let c of playerTeam) {\r\n            c.currentHealth = c.maxHealth\r\n            c.health.value = c.currentHealth\r\n            c.health.setColor(7, 12, 3)\r\n            c.alive = true\r\n        }\r\n        for (let e of enemyTeam) {\r\n            e.health.destroy()\r\n            e.sprite.destroy()\r\n        }\r\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\r\n            sprites.destroy(v)\r\n            pause(1)\r\n        })\r\n        spawnEnemy()\r\n        startBattle()\r\n    } else {\r\n        save()\r\n        game.gameOver(false)\r\n    }\r\n}"}]},{"timestamp":1754960970963,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"ext.ts","patch":[{"start1":50188,"length1":212,"diffs":[[1,"    export function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\n"]]}]}]},{"timestamp":1754960971692,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"rogueCubes_start\"></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":672,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"ext.ts","patch":[{"start1":816,"length1":0,"diffs":[[1,"            public ability: string,\n"]]},{"start1":1415,"length1":157,"diffs":[[1,"            return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\n"]]},{"start1":4912,"length1":113,"diffs":[[1,"        872877828: new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, false, 1)\n"]]},{"start1":5041,"length1":277,"diffs":[[1,"    function addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n        cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\n"]]},{"start1":5364,"length1":311,"diffs":[[1,"    addCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\n    addCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\n    addCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\n    addCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\n    addCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n"]]},{"start1":6965,"length1":0,"diffs":[[1,"                ability: i.ability,\n"]]},{"start1":7478,"length1":140,"diffs":[[1,"            let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\n"]]},{"start1":50142,"length1":727,"diffs":[[1,"    //%block=\"make new cubeling '$name' with\"\n    export function addCubeling(name: string, costume: string,, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\n        addCubelingInternal(name, costume, maxHealth, attack, defense, ability, speed, rarity)\n        rarityMap.push([minAppearance, maxAppearance])\n"]]},{"start1":50556,"length1":1,"diffs":[[1,"}\n"]]}]}]},{"timestamp":1754961570160,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":208,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":19,"diffs":[[1,"\n"]]}]}]},{"timestamp":1754962158085,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":260,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"rogueCubes_start\"></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":672,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1754499968706,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"rogue\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1754524365270,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    upgradesDamage: number\n    upgradesHealth: number\n    upgradesDefense: number\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], false))\n}\n\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10)\n\nplayerTeam = [\n    cubelingPool[0].dupe(true),\n    cubelingPool[1].dupe(true),\n    cubelingPool[2].dupe(true)\n]\n\n// === Start Game ===\nfunction startGame() {\n    ownedCubelings = playerTeam\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense)\n    )\n    if (story.getLastAnswer() == )\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        statusbar.attachToSprite(value.sprite)\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n    })\n    spawnEnemy()\n    startBattle()\n}\n\n// === Spawn AI Enemy Team ===\nfunction spawnEnemy() {\n    enemyTeam = []\n    for (let i = 0; i < 3; i++) {\n        let base = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)]\n        let cub = base.dupe(false)\n        cub.maxHealth += difficulty * 5\n        cub.attack += difficulty * 2\n        cub.defense += difficulty\n        enemyTeam.push(cub)\n    }\n    enemyTeam.forEach((value, index) => {\n        let image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        statusbar.attachToSprite(value.sprite)\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n    })\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, 100)\n    game.splash(`${attacker.name} dealt ${damage} to ${defender.name}`)\n    statusbars.getStatusBarAttachedTo(StatusBarKind.Health, defender.sprite).value = defender.currentHealth\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, 100)\n    if(defender.currentHealth <= 0){\n        defender.alive = false\n        game.splash(`${defender.name} got exausted`)\n    }\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) c.currentHealth = c.maxHealth\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"You lost!\")\n        game.over(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems >= 500) {\n        gems -= 500\n        let newC = cubelingPool[Math.randomRange(0, cubelingPool.length - 1)].dupe(true)\n        ownedCubelings.push(newC)\n        game.splash(`Recruited ${newC.name}!`)\n        jems.setText(gems.toString())\n        jems.x = 80\n        shopping(mone, jems)\n    } else {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n    }\n}\nstartGame()\n","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754610188223,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\n\nif(settings.exists(\"data\")){\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => c.rarity <= difficulty)\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeString(JSON.stringify({ money, gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754614883240,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\n\nif(settings.exists(\"data\")){\n    let data = settings.readJSON(\"data\")\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => c.rarity <= difficulty)\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754869040663,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: {[key:number]: number} = {\n    1:1,\n    2:4,\n    4:10\n}\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif(settings.readJSON(\"data\")!=null){\n    let data = settings.readJSON(\"data\")\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => c.rarity <= rarityMap[c.rarity])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754872602720,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v=>v.kind()==SpriteKind.Food).forEach(v=>v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: {[key:number]: number} = {\n    1:1,\n    2:4,\n    4:10\n}\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif(settings.readJSON(\"data\")!=null){\n    let data = settings.readJSON(\"data\")\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => c.rarity <= rarityMap[c.rarity])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754875991000,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v=>v.kind()==SpriteKind.Food).forEach(v=>v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: {[key:number]: [number, number]} = {\n    1:[1, 20],\n    2:[4, 100],\n    4:[10, Infinity]\n}\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif(settings.readJSON(\"data\")!=null){\n    let data = settings.readJSON(\"data\")\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    let map = rarityMap as {[key:number]: number[]}\n    const allowed = cubelingPool.filter(c => difficulty >= map[c.rarity][1]&&difficulty>=map[c.rarity][0])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[Math.randomRange(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754920522896,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v=>v.kind()==SpriteKind.Food).forEach(v=>v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: [number, number][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif(settings.readJSON(\"data\")!=null){\n    let data = settings.readJSON(\"data\")\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    let map = rarityMap as number[][]\n    const allowed = cubelingPool.filter(c => difficulty >= map[c.rarity][0]&&difficulty<=map[c.rarity][1])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length-1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += difficulty * 100\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    settings.writeJSON(JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }), \"data\")\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754922328082,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if(uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean){\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for(let i = 0; i < ownedCubelings.length; i++){\n        if (i < 70){\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70*page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v=>sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page*70-1, Math.min(ownedCubelings.length-1, page*70+69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if(grid.spriteCol(mySprite) < 9){\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite)*10) + (page*70)\n        if(teamMenuOpen&&ownedCubelings.length>hovered){\n            if (selected.indexOf(ownedCubelings[hovered]) == -1){\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if(selected.length == 3){\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v=>v.kind()==SpriteKind.Food).forEach(v=>v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: {[key: string]: Image} = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number){\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif(settings.readJSON(\"data\")!=null){\n    let data = settings.readJSON(\"data\")\n    console.log(JSON.stringify(data))\n    playerTeam = data.team\n    ownedCubelings = data.owned\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings=playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while(story.isMenuOpen()){\n        pause(1)\n    }\n    if(story.getLastAnswer() == \"Battle\"){\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\"){\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y=30\n        textSprite.x=80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y=19\n        textSprite2.x=80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while(story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage){\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth){\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle(){\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => {console.log(rarityMap[c.rarity-1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity-1][1]); return difficulty >= rarityMap[c.rarity-1][0]&&difficulty<=rarityMap[c.rarity-1][1]})\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length-1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5)-10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2)-4\n        cub.defense += difficulty-2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y-10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v=>v.alive) && enemyTeam.some(v=>v.alive)){\n        if(playerTurn){\n            let aliveDefender = enemyTeam.filter(val=>val.alive)\n            let aliveAttacker = playerTeam.filter(val=>val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length-1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack-defender.defense<5?Math.round(attacker.attack/defender.defense):attacker.attack-defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = {x: attacker.sprite.x, y: attacker.sprite.y}\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x?defender.sprite.x+16:defender.sprite.x-16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed *2)\n    timer.after(500, function() {\n        sprites.destroy(text)\n    })\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v=>v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam){\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam){\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v=>{\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        settings.writeJSON(\"data\", JSON.stringify({ money: money, gems: gems, owned: ownedCubelings, team: playerTeam }))\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function(){\n    \n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754924488766,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = settings.readJSON(\"data\")\n    console.log(JSON.stringify(data))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    console.log(settings.readJSON(\"data\"))\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\n        \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage),\n        \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth),\n        \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + playerTeam[ansInx].upgradesDamage + \", $\" + ((5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) && money >= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage) {\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) {\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle() {\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2) - 4\n        cub.defense += difficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    timer.after(500, function () {\n        sprites.destroy(text)\n    })\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeJSON(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754926291193,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    console.log(data)\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)) && money >=  {\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth * playerTeam[ansInx].rarity) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) {\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle() {\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2) - 4\n        cub.defense += difficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    timer.after(500, function () {\n        sprites.destroy(text)\n    })\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754930140854,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    console.log(data)\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid)\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else ansInx = 2\n        upgrades(ansInx, mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)) && money >= moneyCalc(teamAns.upgradesDamage)) {\n        playerTeam[ansInx].upgradesDamage++\n        money -= (5 * playerTeam[ansInx].upgradesDamage) + playerTeam[ansInx].upgradesDamage\n        playerTeam[ansInx].attack += 5\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + playerTeam[ansInx].upgradesHealth + \", $\" + ((5 * playerTeam[ansInx].upgradesHealth * playerTeam[ansInx].rarity) + playerTeam[ansInx].upgradesHealth) && money >= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth) {\n        playerTeam[ansInx].upgradesHealth++\n        money -= (5 * playerTeam[ansInx].upgradesHealth) + playerTeam[ansInx].upgradesHealth\n        playerTeam[ansInx].maxHealth += 10\n        playerTeam[ansInx].currentHealth = playerTeam[ansInx].maxHealth\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + playerTeam[ansInx].upgradesDefense + \", $\" + ((5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) && money >= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense) {\n        playerTeam[ansInx].upgradesDefense++\n        money -= (5 * playerTeam[ansInx].upgradesDefense) + playerTeam[ansInx].upgradesDefense\n        playerTeam[ansInx].defense += 5\n        upgrades(ansInx, mone, jems)\n    } else {\n        shopping(mone, jems)\n    }\n}\n\nfunction battle() {\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n\n        // Scale stats based on difficulty\n        cub.maxHealth += (difficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (difficulty * 2) - 4\n        cub.defense += difficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getWeightedCubeling(rarityBias: number): Cubeling {\n    let weights: number[] = []\n    for (let cub of cubelingPool) {\n        let baseWeight = 1 / cub.rarity\n        let adjustedWeight = Math.pow(baseWeight, rarityBias)\n        weights.push(adjustedWeight)\n    }\n\n    let total = weights.reduce((a, b) => a + b, 0)\n    let r = Math.random() * total\n    for (let i = 0; i < cubelingPool.length; i++) {\n        r -= weights[i]\n        if (r <= 0) {\n            return cubelingPool[i].dupe(false)\n        }\n    }\n    return cubelingPool[0].dupe(false) // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    timer.after(500, function () {\n        sprites.destroy(text)\n    })\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.floor(difficulty / 10)\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754931942169,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [0, 0],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 2)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    console.log(data)\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else {\n        openTeamSelectMenu()\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\n\nfunction battle() {\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = weightedPool[randint(0, weightedPool.length - 1)]\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: { [key: number]: [number, number] }): number {\n    let [minDiff, maxDiff] = rarityMap[cub.rarity]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    game.splash(\"Battle Start!\")\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"Dead\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    timer.after(500, function () {\n        sprites.destroy(text)\n    })\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        game.splash(\"You won!\")\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.floor(difficulty / 10)\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        game.splash(\"Defeat...\")\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Upgrade Menu ===\nfunction openUpgradeMenu() {\n    game.splash(\"Upgrade your Cubelings\")\n    // (Use menu to upgrade health/atk/def using money)\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754933742892,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    console.log(data)\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 1000\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"Quick Battle\", \"Reset Data\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"Quick Battle\"){\n\n    } else if (story.getLastAnswer() == \"Reset Data\"){\n        if\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth>(defender.maxHealth*3/4)?7:defender.currentHealth>(defender.maxHealth*2/4)?5:defender.currentHealth>(defender.maxHealth/4)?4:2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else{\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.ceil(difficulty / 10)\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754938392212,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                console.log(\"Placed new at \" + grid.spriteCol(mySprite) + \", \" + grid.spriteRow(mySprite))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    console.log(data)\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"Quick Battle\", \"Reset Data\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle(false)\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"Quick Battle\"){\n        battle(true)\n    } else if (story.getLastAnswer() == \"Reset Data\"){\n        if(game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")){\n            settings.remove(\"data\")\n            game.reset()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle(quick: boolean) {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        if(!quick){\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n        value.alive = true\n    })\n    spawnEnemy(quick)\n    startBattle(quick)\n}\n\nfunction spawnEnemy(quick: boolean) {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => { console.log(rarityMap[c.rarity - 1][0] + \"=>\" + difficulty + \"=>\" + rarityMap[c.rarity - 1][1]); return difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] })\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        if(!quick){\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle(quick: boolean) {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle(quick)\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling, quick: boolean) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    if(!quick){\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    }\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle(quick: boolean) {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.ceil(difficulty / 10)\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.alive = true\n        }\n        if(!quick){\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n        }\n        else {game.splash(\"won round \" + difficulty);pause(1)}\n        spawnEnemy(quick)\n        startBattle(quick)\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754940193064,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle(false)\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\"){\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Quick Battle\"){\n            battle(true)\n        } else if (story.getLastAnswer() == \"Reset Data\"){\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Back\"){\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle(quick: boolean) {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        if(!quick){\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n        value.alive = true\n    })\n    spawnEnemy(quick)\n    startBattle(quick)\n}\n\nfunction spawnEnemy(quick: boolean) {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] )\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity-1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        if(!quick){\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle(quick: boolean) {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle(quick)\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling, quick: boolean) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    if(!quick){\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    } else {\n        /*let fullAttacker = attacker.uid ? (attacker.name + \"#\" + attacker.uid) : (\"enemy \" + attacker.name)\n        let fullDefender = defender.uid ? (defender.name + \"#\" + defender.uid) : (\"enemy \" + defender.name)\n        console.log(fullAttacker + \" damaged \" + fullDefender)*/\n        if (defender.currentHealth <= 0)defender.alive = false\n        pause(1)\n    }\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam) }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle(quick: boolean) {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.floor(Math.pow(difficulty, 0.5))\n        gems += Math.ceil(difficulty / 10)\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            if(!quick)\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        if(!quick){\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n        } else {\n            game.splash(\"won round \" + (difficulty-1))\n        }\n        spawnEnemy(quick)\n        startBattle(quick)\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754941995288,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle(false)\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\"){\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Quick Battle\"){\n            battle(true)\n        } else if (story.getLastAnswer() == \"Reset Data\"){\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\"){\n            let code = game.askForString(\"Code\", 20, false)\n            if (simpleHash(code) == 872877828&&activatedCodes.indexOf(code)==-1){\n                activatedCodes.push(code)\n                ownedCubelings.push(new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true))\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\"){\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle(quick: boolean) {\n    if(!quick)scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    else{ scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999111199999999999999999999999999999999999999999999999999999999999999999999999999999911119999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119999999999999999999999999999999999999999999999999999999999999999999999999999111111999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119911999999999999999999999999999999999999999999999999999999999999999999999999111111991199999999999999999999999999999999999999999999999\n        9999999999999999991111111119111119999999999999999999999999999999999999999999999999999999999999999999111111111911111999999999999999999999999999999999999999999999\n        9999999999999999911111111111111119999999999999999999999999999999999999999999999999999999999999999991111111111111111999999999999999999999999999999999999999999999\n        9999999999999999111111111111111111199999999999999999999999999999999999999999999999999999999999999911111111111111111119999999999999999999999999999999999999999999\n        9999999999999999111111111111111111119999999999999999999999999999999999999999999999999999999999999911111111111111111111999999999999999999999999999999999999999999\n        9999999999999999911111111111111111119991199999999999999999999999999999999999999999999999999999999991111111111111111111999119999999999999999999999999999999999999\n        9999999999999111191111111111111111119911111999999999999999999999999999999999999999999999999999911119111111111111111111991111199999999999999999999999999999999999\n        9999999999991111119111111111111111199911111999999999999999999999999999999999999999999999999999111111911111111111111119991111199999999999999999999999999999999999\n        9999999999991111111111111111111111911111111199999999999999999999999999999999999999999999999999111111111111111111111191111111119999999999999999999999999999999999\n        9999999999991111111111111111111111111111111199999999999999999999999999999999999999999999999999111111111111111111111111111111119999999999999999999999999999999999\n        9999999999999111111111111111111111111111111199999999999999999999999999999999999999999999999999911111111111111111111111111111119999999999999999999999999999999999\n        9911199991111911111111111111111111111111111991199999999999991111999999999999999999991119999111191111111111111111111111111111199119999999999999111199999999999999\n        9111119911111111111111111111111111111111111911119999999999911111199999999999999999911111991111111111111111111111111111111111191111999999999991111119999999999999\n        9111119111111111111111111111111111111111111911119999999999911111191119999999999999911111911111111111111111111111111111111111191111999999999991111119111999999999\n        9911111111111111111111111111111111111111111111119999999999999111111111999999999999991111111111111111111111111111111111111111111111999999999999911111111199999999\n        9111111111111111111111111111111111111111111111199999999911119111111111999999999999911111111111111111111111111111111111111111111119999999991111911111111199999999\n        1111111111111111111111111111111111111111111111119999999111111111111119999999999199111111111dd1111111111111111111111111111111111111999999911111111111111999999999\n        1111111111111111111111111111111111111111111111111911199111111111111111111999999ddd111111111ddd111111111111111111111111111111111111191119911111111111111111199999\n        1111111111111111111111111111111111111111111111111111111111111111111111111199991ddd111111111ddd111111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111111111111111111111111111111111111999ddddddd111111ddddd11111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        1111111111111111111ddd1111111111111111111d11dddddd111111111111111111111111111d11dddd11111ddddddd11111111111111111111dd1111111111111111111dd1d1ddddd1111111111111\n        111111111111111111ddddd111111111111111111ddddddd1d111111111111111111111111111ddddddd11111ddddddd1111111111111111111dddd111111111111111111dddddd11dd1111111111111\n        11111111111111111dddddd111111111111111111ddddddddd1111111111d11111111ddddd111d1ddddd11111ddddddd11111111111111111dddddd111111111111111111dddddddddd1111111111111\n        11111111111111111ddd1d111111d111111111111ddddddddd111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111ddd1d111111dd11111111111dddd1ddddd11111111dd111\n        11111111111111111dddddd11111d111111111111ddddddd1d111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111dddddd11111dd11111111111ddddddd1dd11111111dd111\n        11111111ddd111111dd11d11111ddd11111111111ddddddddd11dddddd1dd11111111ddddd111ddddddd11111ddddddd111111111dd111111ddd1d11111ddd11111111111dddddddddd1ddddddddd111\n        d1dd1111ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd111111111dd1dd11ddddddd111dddddddddd1dd1111ddddddddddddd1d1111dddd1111111111dddddd11dd1d11dddddd111\n        dddd11111d1dd1ddddddddd111ddddd1111111111ddddddddd11dddd1d1dd11111111dddddd11dd1dddd111ddddddddddddd1111dd1ddd1dddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dd1d11111ddd1111ddddddd111ddddd1111111111ddddddddd11dddd1dddd11111111dddddd11ddddddd111ddddddddddd1d1111dddd1d11ddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dddd1111dddddddddddddddd11dddddd11dd1dd1ddddddddddd1d11dddddd11111111dddddd11ddddddd111ddddddddddddd1111dddddddddddddddd11dddddd111d11ddddddddddddd1d11dddddd111\n        dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11dddddd11ddddddd111ddddddddddd1d1111dddddddddddddddd11dddddd111dddddddddddddddd1ddddddddd111\n        ddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd11bbddddddd1ddd11dd1dd11ddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddbddddddd11bbbddd1dd\n        ddddd1dddddddddddddddddddd1dddddd1dddddddddbbbdddddddddbbbdddddd1ddd1dddddd11ddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbddd1dd\n        ddddd1ddddddddddddddddddddddddddd1dddddddddbbbdddddddddbbbdddddddddddddddddddddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbdddddd\n        ddddd1ddddddddddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddd1dddddddddddddddddddddddddd1d1ddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbddbbbbbbddddddddddddddddddd1dddddddbddbbbbdddddbbbbbbbdd111dddddddddddddddbbdddd1ddddddddddddddbbdbdbbbbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbdbddddddddddddddddddd1dddddddbbbbbbbdddddbbbbbbbddd11ddddddddddddddbbbbddd1ddddddddddddddbbbbbbddbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbddddddddddbddddddddbbbbbdddbdbbbbbdddddbbbbbbbddddddddddd1dddddbbbbbbddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddddbbbbddddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd1ddddddddddddddbbbdbddddddbbdddddddddddbbbbdbbbbbddddddddbbdddddddddbbbbddddbbbdbbbddddbbbbbbbbd1d\n        dddddbbbbbbbdbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd111ddddddddddddbbbbbbdddddbbdddddddddddbbbbbbbdbbddddddddbbddddddddbbbbbbdddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbbbddbbbbbbdbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdddddddddbb1dddddbbbdbdddddbbbdddddddddddbbbbbbbbbbdbbbbbbbbbddddddddbbbbbbdddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbdbddbddbbbdbbdddddddddbbdbbddbbbbbbbdddbbbbbbbbbbdbbddddbbbbbbbbbbbbbdbddddbbbbddddddddddbbbbbbddbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbdbbddddddddbbbbbbddbbdbbbbdddbbbbbbbbbbbbbddddbbdbbbdbbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbdbddbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dbbdbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbbbddddbbbbbbbbbbbbbbbbddbbbbbbdddbddbbbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbdbbbbbbbbbddbddbddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbbbbbbbbbbbbbddbbbbbbdddbbbbbbbbbbbbbbbbdbbbbbbbbbdddddbddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbddbbbbbbbbbbbbbddddbbbbbbbdbbbddbbdbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbdbbbbbbbbbbbbbddbbbbbbbdddbddbbbbbbbbbbbbbbddbdbbbbdbbdbbbdbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbdbbbbbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbdbbbbbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbb\n        bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7\n        bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77\n        bb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777b\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n    `)\n    let\n    }\n    playerTeam.forEach((value, index) => {\n        if(!quick){\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n        value.alive = true\n    })\n    spawnEnemy(quick)\n    startBattle(quick)\n}\n\nfunction spawnEnemy(quick: boolean) {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] )\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity-1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        if(!quick){\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle(quick: boolean) {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle(quick)\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling, quick: boolean) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    if(!quick){\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    } else {\n        /*let fullAttacker = attacker.uid ? (attacker.name + \"#\" + attacker.uid) : (\"enemy \" + attacker.name)\n        let fullDefender = defender.uid ? (defender.name + \"#\" + defender.uid) : (\"enemy \" + defender.name)\n        console.log(fullAttacker + \" damaged \" + fullDefender)*/\n        if (defender.currentHealth <= 0)defender.alive = false\n        pause(1)\n    }\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle(quick: boolean) {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        if(quick) pause(1)\n        else pause(700)\n        money += Math.ceil(difficulty / 10 / (quick ? 4 : 1))\n        gems += Math.floor(Math.pow(difficulty, 0.5) / (quick ? 4 : 1))\n        if(!quick)save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            if(!quick){\n                c.health.value = c.currentHealth\n                c.health.setColor(7, 12, 3)\n            }\n            c.alive = true\n        }\n        if(!quick){\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n        }\n        spawnEnemy(quick)\n        startBattle(quick)\n    } else {\n        save()\n        if(quick)game.setGameOverMessage(false, \"Lost round \" + difficulty)\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754949829480,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet quickBar: StatusBarSprite\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle(false)\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\"){\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Quick Battle\"){\n            battle(true)\n        } else if (story.getLastAnswer() == \"Reset Data\"){\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\"){\n            let code = game.askForString(\"Code\", 20, false)\n            if (simpleHash(code) == 872877828&&activatedCodes.indexOf(code)==-1){\n                activatedCodes.push(code)\n                ownedCubelings.push(new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true))\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\"){\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle(quick: boolean) {\n    if(!quick)scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    else{ scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999111199999999999999999999999999999999999999999999999999999999999999999999999999999911119999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119999999999999999999999999999999999999999999999999999999999999999999999999999111111999999999999999999999999999999999999999999999999999\n        9999999999999999999991111119911999999999999999999999999999999999999999999999999999999999999999999999999111111991199999999999999999999999999999999999999999999999\n        9999999999999999991111111119111119999999999999999999999999999999999999999999999999999999999999999999111111111911111999999999999999999999999999999999999999999999\n        9999999999999999911111111111111119999999999999999999999999999999999999999999999999999999999999999991111111111111111999999999999999999999999999999999999999999999\n        9999999999999999111111111111111111199999999999999999999999999999999999999999999999999999999999999911111111111111111119999999999999999999999999999999999999999999\n        9999999999999999111111111111111111119999999999999999999999999999999999999999999999999999999999999911111111111111111111999999999999999999999999999999999999999999\n        9999999999999999911111111111111111119991199999999999999999999999999999999999999999999999999999999991111111111111111111999119999999999999999999999999999999999999\n        9999999999999111191111111111111111119911111999999999999999999999999999999999999999999999999999911119111111111111111111991111199999999999999999999999999999999999\n        9999999999991111119111111111111111199911111999999999999999999999999999999999999999999999999999111111911111111111111119991111199999999999999999999999999999999999\n        9999999999991111111111111111111111911111111199999999999999999999999999999999999999999999999999111111111111111111111191111111119999999999999999999999999999999999\n        9999999999991111111111111111111111111111111199999999999999999999999999999999999999999999999999111111111111111111111111111111119999999999999999999999999999999999\n        9999999999999111111111111111111111111111111199999999999999999999999999999999999999999999999999911111111111111111111111111111119999999999999999999999999999999999\n        9911199991111911111111111111111111111111111991199999999999991111999999999999999999991119999111191111111111111111111111111111199119999999999999111199999999999999\n        9111119911111111111111111111111111111111111911119999999999911111199999999999999999911111991111111111111111111111111111111111191111999999999991111119999999999999\n        9111119111111111111111111111111111111111111911119999999999911111191119999999999999911111911111111111111111111111111111111111191111999999999991111119111999999999\n        9911111111111111111111111111111111111111111111119999999999999111111111999999999999991111111111111111111111111111111111111111111111999999999999911111111199999999\n        9111111111111111111111111111111111111111111111199999999911119111111111999999999999911111111111111111111111111111111111111111111119999999991111911111111199999999\n        1111111111111111111111111111111111111111111111119999999111111111111119999999999199111111111dd1111111111111111111111111111111111111999999911111111111111999999999\n        1111111111111111111111111111111111111111111111111911199111111111111111111999999ddd111111111ddd111111111111111111111111111111111111191119911111111111111111199999\n        1111111111111111111111111111111111111111111111111111111111111111111111111199991ddd111111111ddd111111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111111111111111111111111111111111111999ddddddd111111ddddd11111111111111111111111111111111111111111111111111111111111119999\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        11111111111111111111111111111111111111111ddddddddd111111111111111111111111111ddddddd111111ddddd111111111111111111111111111111111111111111dddddddddd1111111111111\n        1111111111111111111ddd1111111111111111111d11dddddd111111111111111111111111111d11dddd11111ddddddd11111111111111111111dd1111111111111111111dd1d1ddddd1111111111111\n        111111111111111111ddddd111111111111111111ddddddd1d111111111111111111111111111ddddddd11111ddddddd1111111111111111111dddd111111111111111111dddddd11dd1111111111111\n        11111111111111111dddddd111111111111111111ddddddddd1111111111d11111111ddddd111d1ddddd11111ddddddd11111111111111111dddddd111111111111111111dddddddddd1111111111111\n        11111111111111111ddd1d111111d111111111111ddddddddd111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111ddd1d111111dd11111111111dddd1ddddd11111111dd111\n        11111111111111111dddddd11111d111111111111ddddddd1d111111111dd11111111ddddd111ddddddd11111ddddddd11111111111111111dddddd11111dd11111111111ddddddd1dd11111111dd111\n        11111111ddd111111dd11d11111ddd11111111111ddddddddd11dddddd1dd11111111ddddd111ddddddd11111ddddddd111111111dd111111ddd1d11111ddd11111111111dddddddddd1ddddddddd111\n        d1dd1111ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd111111111dd1dd11ddddddd111dddddddddd1dd1111ddddddddddddd1d1111dddd1111111111dddddd11dd1d11dddddd111\n        dddd11111d1dd1ddddddddd111ddddd1111111111ddddddddd11dddd1d1dd11111111dddddd11dd1dddd111ddddddddddddd1111dd1ddd1dddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dd1d11111ddd1111ddddddd111ddddd1111111111ddddddddd11dddd1dddd11111111dddddd11ddddddd111ddddddddddd1d1111dddd1d11ddddddd1111dddd1111111111dddddddddd1dddd1dddd111\n        dddd1111dddddddddddddddd11dddddd11dd1dd1ddddddddddd1d11dddddd11111111dddddd11ddddddd111ddddddddddddd1111dddddddddddddddd11dddddd111d11ddddddddddddd1d11dddddd111\n        dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11dddddd11ddddddd111ddddddddddd1d1111dddddddddddddddd11dddddd111dddddddddddddddd1ddddddddd111\n        ddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd11bbddddddd1ddd11dd1dd11ddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddbddddddd11bbbddd1dd\n        ddddd1dddddddddddddddddddd1dddddd1dddddddddbbbdddddddddbbbdddddd1ddd1dddddd11ddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbddd1dd\n        ddddd1ddddddddddddddddddddddddddd1dddddddddbbbdddddddddbbbdddddddddddddddddddddddddd111ddddddddddddddd1dddddddddddddddddddddddddd1ddddddddddbbdddddddddbbbdddddd\n        ddddd1ddddddddddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddd1dddddddddddddddddddddddddd1d1ddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbbbbbbbbbddddddddddddddddddd1dddddddbbbbbbbddddddbbbbbddddddddddddddddddddddddddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddd1ddddddddbbbbbbbdddddbbbbbddddd\n        dddddbddbbbbbbddddddddddddddddddd1dddddddbddbbbbdddddbbbbbbbdd111dddddddddddddddbbdddd1ddddddddddddddbbdbdbbbbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbdbddddddddddddddddddd1dddddddbbbbbbbdddddbbbbbbbddd11ddddddddddddddbbbbddd1ddddddddddddddbbbbbbddbbdddddddddddddddddd1ddddddddbbbbbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbddddddddddbddddddddbbbbbdddbdbbbbbdddddbbbbbbbddddddddddd1dddddbbbbbbddd1ddddddddddddddbbbbbbbbbbdddddddddddddddddddbbbbddddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbbbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd1ddddddddddddddbbbdbddddddbbdddddddddddbbbbdbbbbbddddddddbbdddddddddbbbbddddbbbdbbbddddbbbbbbbbd1d\n        dddddbbbbbbbdbdddddddddbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdd111ddddddddddddbbbbbbdddddbbdddddddddddbbbbbbbdbbddddddddbbddddddddbbbbbbdddbbbbbbbddddbbbbbbbb11d\n        dddddbbbbbbbbbddbbbbbbdbbddddddddbbbbbdddbbbbbbbdddddbbbbbbbdddddddddbb1dddddbbbdbdddddbbbdddddddddddbbbbbbbbbbdbbbbbbbbbddddddddbbbbbbdddbbbdbbbddddbbbbbbbbddd\n        dddddbbbbbbbdbddbddbbbdbbdddddddddbbdbbddbbbbbbbdddbbbbbbbbbbdbbddddbbbbbbbbbbbbbdbddddbbbbddddddddddbbbbbbddbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbdbbddddddddbbbbbbddbbdbbbbdddbbbbbbbbbbbbbddddbbdbbbdbbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        dddddbbbbbbbbbddbbbbdbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbdbddbbbbbbbddddbbbbddddddddddbbbbbbbbbbdbbbbdbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        dbbdbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbddbbbbbbbdddbbbbbbbbbbbbbddddbbbbbbbbbbbbbbbbddbbbbbbdddbddbbbbbbbbbbbbbdbddbbbbbbddddddddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbdbbbbbbbbbddbddbddbbbbbbddbbbbbbbdddbbbbbbbbbbbdbddddbbbbbbbbbbbbbbbbddbbbbbbdddbbbbbbbbbbbbbbbbdbbbbbbbbbdddddbddbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbddbbbbbbbbbbbbbddddbbbbbbbdbbbddbbdbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbdbbbbbbbbbbbbbddbbbbbbbdddbddbbbbbbbbbbbbbbddbdbbbbdbbdbbbdbbbbbbbddbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbdbbbbbbddbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbdbbbbbbbbbbbddbbbbdbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbddbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbdddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbbbbbbbb7bbbbbbbbbbbbbbbb7bbbbb\n        bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7bbbbbb7bbb77bbbbb77bbbb7bbb7bbbb7b77bbb7\n        bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77bb7bbb77b77bb7bbb77bbb77bbb77bbb7bb77b77\n        bb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777bbb77bb77b77bb77bbb77b77bbbb77b7b77b7777b\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n        7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n    `)\n    quickBar = statusbars.create(100, 20, StatusBarKind.Magic)\n    quickBar.setColor(6, 12)\n    }\n    playerTeam.forEach((value, index) => {\n        if(!quick){\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n        value.alive = true\n    })\n    spawnEnemy(quick)\n    startBattle(quick)\n}\n\nfunction spawnEnemy(quick: boolean) {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] )\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity-1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        if(!quick){\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        }\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\n// === Battle Loop ===\nfunction startBattle(quick: boolean) {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    if(quick){\n        quickBar.max = 0\n        enemyTeam.forEach(v=>{quickBar.max+=v.maxHealth;pause(1)})\n        quickBar.value = quickBar.max\n    }\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)], quick)\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle(quick)\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling, quick: boolean) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    if(!quick){\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    } else {\n        /*let fullAttacker = attacker.uid ? (attacker.name + \"#\" + attacker.uid) : (\"enemy \" + attacker.name)\n        let fullDefender = defender.uid ? (defender.name + \"#\" + defender.uid) : (\"enemy \" + defender.name)\n        console.log(fullAttacker + \" damaged \" + fullDefender)*/\n        quickBar.value -= damage\n        if (defender.currentHealth <= 0)defender.alive = false\n        pause(10)\n    }\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle(quick: boolean) {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        if(quick) pause(10)\n        else pause(700)\n        money += Math.ceil(difficulty / 10 / (quick ? 4 : 1))\n        gems += Math.floor(Math.pow(difficulty, 0.5) / (quick ? 4 : 1))\n        if(!quick)save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            if(!quick){\n                c.health.value = c.currentHealth\n                c.health.setColor(7, 12, 3)\n            }\n            c.alive = true\n        }\n        if(!quick){\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n        }\n        spawnEnemy(quick)\n        startBattle(quick)\n    } else {\n        save()\n        if(quick)game.setGameOverMessage(false, \"Lost round \" + difficulty)\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754951630574,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"loxPVf7jbG@/V5.;BA7y\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"-g]d9`==hbwvO|UT0fEd\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"U#x9K!d]6*XTx%G6CkM3\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"?OKHd.+a0/WyaY#GFwnn\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"#Fy6~$%,0zhU3#3x=BBW\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nlet costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false))\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nfunction startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\"){\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if(story.getLastAnswer() == \"Quick Battle\"){\n            //quickBattle\n        } else if (story.getLastAnswer() == \"Reset Data\"){\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\"){\n            let code = game.askForString(\"Code\", 20, false)\n            if (simpleHash(code) == 872877828&&activatedCodes.indexOf(code)==-1){\n                activatedCodes.push(code)\n                ownedCubelings.push(new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true))\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\"){\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)        \n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite){\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number)=>(5*a*teamAns.rarity)+a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)){\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)){\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)){\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1] )\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity-1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity-1][0]\n    let maxDiff = rarityMap[rarity-1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle(){\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    while(totalPlayerStats.health>0){\n        if(difficulty == 1){\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if(totalPlayerStats.health>0)\n    }\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\nstartGame()\ngame.onUpdateInterval(2000, function () {\n\n})","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"rogue #2 - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754953430677,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"rogueCubes.startGame()\n","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","game.ts":"namespace rogueCubes{\n// === Cubeling Definition ===\nclass Cubeling {\n    constructor(\n        public name: string,\n        public costume: string,\n        public maxHealth: number,\n        public attack: number,\n        public defense: number,\n        public ability: string,\n        public speed: number,\n        public image: Image,\n        public rarity: number,\n        uidCount: boolean,\n        public rid: number\n    ) {\n        this.currentHealth = maxHealth\n        this.uid = uid\n        if (uidCount) uid++\n    }\n    currentHealth: number\n    sprite: Sprite\n    alive: boolean = true\n    uid: number\n    health: StatusBarSprite\n    upgradesDamage: number = 1\n    upgradesHealth: number = 1\n    upgradesDefense: number = 1\n    dupe(uidCount: boolean) {\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\n    }\n}\nfunction openTeamSelectMenu() {\n    teamMenuOpen = true\n    let page = 0\n    let selected: Cubeling[] = []\n    for (let i = 0; i < ownedCubelings.length; i++) {\n        if (i < 70) {\n            let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n            let row = Math.floor(i / 10)\n            let column = i % 10\n            grid.place(newSprite, tiles.getTileLocation(column, row))\n        }\n    }\n    let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n    grid.place(mySprite, tiles.getTileLocation(0, 0))\n    grid.moveWithButtons(mySprite)\n    controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n            sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n            let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n            for (let i = 0; i < curLings.length; i++) {\n                if (i < 70) {\n                    let newSprite = sprites.create(curLings[i].image)\n                    let row = Math.floor(i / 10)\n                    let column = i % 10\n                    grid.place(newSprite, tiles.getTileLocation(column, row))\n                }\n            }\n        } else if (grid.spriteCol(mySprite) < 9) {\n            grid.move(mySprite, 1, 0)\n        }\n    })\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n        if (teamMenuOpen && ownedCubelings.length > hovered) {\n            if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                selected.push(ownedCubelings[hovered])\n                let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                selectedIndicator.z = mySprite.z - 1\n                grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                if (selected.length == 3) {\n                    sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                    sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                    sprites.destroy(mySprite)\n                    playerTeam = selected\n                    startGame()\n                }\n            } else {\n                selected.removeElement(ownedCubelings[hovered])\n                grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n            }\n        }\n    })\n}\n\n// === Global Game State ===\nlet playerTeam: Cubeling[] = []\nlet ownedCubelings: Cubeling[] = []\nlet enemyTeam: Cubeling[] = []\nlet activatedCodes: string[] = []\nlet money = 0\nlet gems = 500\nlet difficulty = 1\nlet uid = 0\nlet teamMenuOpen = false\nlet rarityMap: number[][] = [\n    [1, 20],\n    [4, 100],\n    [7, 500],\n    [10, Infinity]\n]\ntiles.setCurrentTilemap(tilemap`level1`)\n\nexport let costumes: { [key: string]: Image } = {\n    Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n    Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n}\n\nexport let id = 0\n\n// === Sample Cubeling Pool ===\nlet cubelingPool: Cubeling[] = []\n\nexport let codes: {[hash: number]: ()=>Cubeling} = {\n    872877828: ()=>{id++;return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, -1)}\n}\n\nexport function addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\n    id++\n}\n\naddCubeling(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\naddCubeling(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\naddCubeling(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\naddCubeling(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\naddCubeling(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\n\nif (settings.readJSON(\"data\") != null) {\n    let data = JSON.parse(settings.readString(\"data\"))\n    playerTeam = jsonToCubelings(data.team, false)\n    ownedCubelings = jsonToCubelings(data.owned, true)\n    money = data.money\n    gems = data.gems\n    activatedCodes = data.codes\n} else {\n    playerTeam = [\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true),\n        cubelingPool[0].dupe(true)\n    ]\n    ownedCubelings = playerTeam\n    money = 0\n    gems = 0\n}\n\nfunction simpleHash(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\n        hash |= 0 // force 32-bit\n    }\n    return hash\n}\n\n// === Start Game ===\nexport function startGame() {\n    story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Battle\") {\n        battle()\n    } else if (story.getLastAnswer() == \"Shop\") {\n        let textSprite = textsprite.create(money.toString())\n        textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n        textSprite.y = 30\n        textSprite.x = 80\n        let textSprite2 = textsprite.create(gems.toString())\n        textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n        textSprite2.y = 19\n        textSprite2.x = 80\n        pause(1)\n        shopping(textSprite, textSprite2)\n    } else if (story.getLastAnswer() == \"Equip\") {\n        openTeamSelectMenu()\n    } else if (story.getLastAnswer() == \"More\") {\n        story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Quick Battle\") {\n            quickBattle()\n        } else if (story.getLastAnswer() == \"Reset Data\") {\n            if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                settings.remove(\"data\")\n                game.reset()\n            } else {\n                startGame()\n            }\n        } else if (story.getLastAnswer() == \"Enter Code\") {\n            let code = game.askForString(\"Code\", 20, false)\n            if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                activatedCodes.push(code)\n                ownedCubelings.push(codes[simpleHash(code)]())\n            }\n            startGame()\n        } else if (story.getLastAnswer() == \"Back\") {\n            startGame()\n        }\n    }\n}\n\nfunction shopping(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Recruit\") {\n        recruitCubeling(mone, jems)\n    } else if (story.getLastAnswer() == \"Upgrade\") {\n        selectUpgrades(mone, jems)\n    } else {\n        sprites.destroy(mone)\n        sprites.destroy(jems)\n        startGame()\n    }\n}\n\nfunction selectUpgrades(mone: TextSprite, jems: TextSprite) {\n    story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    let ansInx: number\n    if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n    else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n    else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n    else shopping(mone, jems)\n    upgrades(ansInx, mone, jems)\n}\n\nfunction upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n    let teamAns = playerTeam[ansInx]\n    let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n    story.showPlayerChoices(\n        \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n        \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n        \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n        \"Back\"\n    )\n    while (story.isMenuOpen()) {\n        pause(1)\n    }\n    if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n        if (money >= moneyCalc(teamAns.upgradesDamage)) {\n            money -= moneyCalc(teamAns.upgradesDamage)\n            teamAns.upgradesDamage++\n            teamAns.attack += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n        if (money >= moneyCalc(teamAns.upgradesHealth)) {\n            money -= moneyCalc(teamAns.upgradesHealth)\n            teamAns.upgradesHealth++\n            teamAns.maxHealth += 10\n            teamAns.currentHealth = teamAns.maxHealth\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n        if (money >= moneyCalc(teamAns.upgradesDefense)) {\n            money -= moneyCalc(teamAns.upgradesDefense)\n            teamAns.upgradesDefense++\n            teamAns.defense += 5\n            mone.setText(money + \"\")\n        }\n        upgrades(ansInx, mone, jems)\n    } else {\n        selectUpgrades(mone, jems)\n    }\n}\nfunction battle() {\n    scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n    playerTeam.forEach((value, index) => {\n        value.sprite = sprites.create(value.image)\n        let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 62\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n        value.alive = true\n    })\n    spawnEnemy()\n    startBattle()\n}\n\nfunction spawnEnemy() {\n    enemyTeam = []\n\n    // Filter based on allowed rarities (difficulty gates access)\n    const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n    // Build weighted pool: each cubeling appears multiple times based on rarity weight\n    const weightedPool: Cubeling[] = []\n    for (const cub of allowed) {\n        const weight = 1 / cub.rarity\n        const entries = Math.round(weight * 100) // scale to 100 for precision\n        for (let i = 0; i < entries; i++) {\n            weightedPool.push(cub)\n        }\n    }\n\n    for (let i = 0; i < 3; i++) {\n        const base = pickCubelingFromPool()\n        const cub = base.dupe(false)\n        let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n        // Scale stats based on difficulty\n        cub.maxHealth += (scaledDifficulty * 5) - 10\n        cub.currentHealth = cub.maxHealth\n        cub.attack += (scaledDifficulty * 2) - 4\n        cub.defense += scaledDifficulty - 2\n        enemyTeam.push(cub)\n    }\n\n    // Create sprites and health bars\n    enemyTeam.forEach((value, index) => {\n        const image = value.image.clone()\n        image.flipX()\n        value.sprite = sprites.create(image, SpriteKind.Enemy)\n        const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n        statusbar.setColor(7, 12, 3)\n        statusbar.max = value.maxHealth\n        statusbar.value = value.currentHealth\n        value.health = statusbar\n        value.sprite.x = 98\n        value.sprite.y = 60 + (18 * index) - 18\n        value.health.x = value.sprite.x\n        value.health.y = value.sprite.y - 10\n    })\n}\n\nfunction getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n    let rarity = cub.rarity\n    let minDiff = rarityMap[rarity - 1][0]\n    let maxDiff = rarityMap[rarity - 1][1]\n\n    // Outside allowed range → 0 weight\n    if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n    // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n    // Low% at minDiff, ramps up to 100% at maxDiff\n    let lowPercent = 0.1 // you can tweak this\n    if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n    let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n    let weight = lowPercent + t * (1 - lowPercent)\n\n    return weight\n}\n\nfunction pickCubelingFromPool(): Cubeling {\n    let weights: number[] = []\n    let totalWeight = 0\n    for (let cub of cubelingPool) {\n        let w = getCubelingWeight(cub, difficulty, rarityMap)\n        weights.push(w)\n        totalWeight += w\n    }\n\n    let r = Math.random() * totalWeight\n    let acc = 0\n    for (let i = 0; i < cubelingPool.length; i++) {\n        acc += weights[i]\n        if (r < acc) return cubelingPool[i]\n    }\n    return cubelingPool[0] // fallback\n}\n\nfunction quickBattle() {\n    let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n    let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n    let inMon = 0\n    let inGem = 0\n    while (totalPlayerStats.health > 0) {\n        if (difficulty == 1) {\n            totalPlayerStats.health -= 1\n        }\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= rarityMap[c.rarity - 1][0] && difficulty <= rarityMap[c.rarity - 1][1])\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n        playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n        let playerTurn = false\n        while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n            if (playerTurn) {\n                totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n            } else {\n                totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n            }\n            playerTurn = !playerTurn\n        }\n        if (totalPlayerStats.health > 0) {\n            difficulty++\n            money += Math.ceil(difficulty / 100)\n            inMon += Math.ceil(difficulty / 10)\n            gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n            inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n        }\n    }\n    save()\n    game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n    game.gameOver(false)\n}\n\n// === Battle Loop ===\nfunction startBattle() {\n    let playerTurn = true\n    let playerIndex = 0\n    let enemyIndex = 0\n    playerTeam.sort((a, b) => b.speed - a.speed)\n    enemyTeam.sort((a, b) => b.speed - a.speed)\n    // Simplified Turn-Based System (one Cubeling each)\n    while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n        if (playerTurn) {\n            let aliveDefender = enemyTeam.filter(val => val.alive)\n            let aliveAttacker = playerTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = enemyTeam.filter(val => val.alive)\n            playerIndex++\n            playerIndex %= aliveAttacker.length\n            enemyIndex %= aliveDefender.length\n        } else {\n            let aliveDefender = playerTeam.filter(val => val.alive)\n            let aliveAttacker = enemyTeam.filter(val => val.alive)\n            dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n            aliveDefender = playerTeam.filter(val => val.alive)\n            enemyIndex++\n            enemyIndex %= aliveAttacker.length\n            playerIndex %= aliveDefender.length\n        }\n        playerTurn = !playerTurn\n    }\n    endBattle()\n}\n\nfunction dealDamage(attacker: Cubeling, defender: Cubeling) {\n    let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n    if (damage < 0) damage = 0\n    defender.currentHealth -= damage\n    let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n    story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n    let text = textsprite.create(\"-\" + damage, 0, 2)\n    text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    text.y = defender.sprite.y\n    defender.health.value = defender.currentHealth\n    defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n    if (defender.currentHealth <= 0) {\n        defender.alive = false\n        text.setText(\"X\")\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n    } else {\n        timer.after(500, function () {\n            sprites.destroy(text)\n        })\n    }\n    story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n}\n\nfunction cubelingsToJSON(cublings: Cubeling[]) {\n    let end: { [key: string]: any }[] = []\n    for (let i of cublings) {\n        end.push({\n            name: i.name,\n            costume: i.costume,\n            maxHealth: i.maxHealth,\n            attack: i.attack,\n            defense: i.defense,\n            ability: i.ability,\n            speed: i.speed,\n            rarity: i.rarity,\n            uid: i.uid,\n            rid: i.rid,\n            upgradesDamage: i.upgradesDamage,\n            upgradesHealth: i.upgradesHealth,\n            upgradesDefense: i.upgradesDefense\n        })\n    }\n    return end\n}\n\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n    let end: Cubeling[] = []\n    for (let i of cublings) {\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\n        n.uid = i.uid\n        if (uidCount) uid = Math.max(uid, i.uid)\n        n.upgradesDamage = i.upgradesDamage\n        n.upgradesHealth = i.upgradesHealth\n        n.upgradesDefense = i.upgradesDefense\n        end.push(n)\n    }\n    return end\n}\n\nfunction save() {\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n}\n\n// === End Battle and Reward ===\nfunction endBattle() {\n    let playerWins = !enemyTeam.some(v => v.alive)\n    if (playerWins) {\n        pause(700)\n        money += Math.ceil(difficulty / 10)\n        gems += Math.floor(Math.pow(difficulty, 0.5))\n        save()\n        difficulty += 1\n        // Heal Cubelings\n        for (let c of playerTeam) {\n            c.currentHealth = c.maxHealth\n            c.health.value = c.currentHealth\n            c.health.setColor(7, 12, 3)\n            c.alive = true\n        }\n        for (let e of enemyTeam) {\n            e.health.destroy()\n            e.sprite.destroy()\n        }\n        sprites.allOfKind(SpriteKind.Text).forEach(v => {\n            sprites.destroy(v)\n            pause(1)\n        })\n        spawnEnemy()\n        startBattle()\n    } else {\n        save()\n        game.gameOver(false)\n    }\n}\n\n// === Recruit Menu ===\nfunction recruitCubeling(mone: TextSprite, jems: TextSprite) {\n    if (gems < 500) {\n        game.splash(\"Not enough gems!\")\n        shopping(mone, jems)\n        return\n    }\n\n    gems -= 500\n\n    // Build weighted list dynamically\n    let weightedList: Cubeling[] = []\n    for (let c of cubelingPool) {\n        let weight = 1 / c.rarity\n        let count = Math.round(weight * 100) // Scale for precision\n        for (let i = 0; i < count; i++) {\n            weightedList.push(c)\n        }\n    }\n\n    let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n    ownedCubelings.push(selected)\n\n    game.splash(`Recruited ${selected.name}!`)\n    jems.setText(gems.toString())\n    jems.x = 80\n    shopping(mone, jems)\n}\n}","pxt.json":"{\n    \"name\": \"rogueCubes\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754959603160,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"rogueCubes_start\"></block></statement></block></xml>","main.ts":"console.log(\"is working\")\r\nconsole.log(\"is working\")\r\n// === Global Game State ===\r\nlet playerTeam: Cubeling[] = []\r\nlet ownedCubelings: Cubeling[] = []\r\nlet enemyTeam: Cubeling[] = []\r\nlet activatedCodes: string[] = []\r\nlet money = 0\r\nlet gems = 500\r\nlet difficulty = 1\r\nlet uid = 0\r\nlet teamMenuOpen = false\r\nlet rarityMap: number[][] = [\r\n    [1, 20],\r\n    [4, 100],\r\n    [4, 100],\r\n    [7, 500],\r\n    [10, Infinity]\r\n]\r\ntiles.setCurrentTilemap(tilemap`level1`)\r\n\r\nlet costumes: { [key: string]: Image } = {\r\n    Fire: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 f f f . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Water: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 f f f . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Earth: img`\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b f f f . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . b b b b b b b b b . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n    . . . . . . . . . . . . . . . .\r\n`,\r\n    Basic: img`\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 f f f . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n    `,\r\n    Lightning: img`\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 f f f . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n        . . . . . . . . . . . . . . . .\r\n    `,\r\n}\r\n\r\nlet id = 0\r\n\r\n// === Sample Cubeling Pool ===\r\nlet cubelingPool: Cubeling[] = []\r\n\r\nlet codes: { [hash: number]: () => Cubeling } = {\r\n    872877828: () => { id++; return new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, \"Destroy\", 50, costumes[\"Lightning\"], 60, true, -1) }\r\n}\r\n// === Cubeling Definition ===\r\nclass Cubeling {\r\n    constructor(\r\n        public name: string,\r\n        public costume: string,\r\n        public maxHealth: number,\r\n        public attack: number,\r\n        public defense: number,\r\n        public ability: string,\r\n        public speed: number,\r\n        public image: Image,\r\n        public rarity: number,\r\n        uidCount: boolean,\r\n        public rid: number\r\n    ) {\r\n        this.currentHealth = maxHealth\r\n        this.uid = uid\r\n        if (uidCount) uid++\r\n    }\r\n    currentHealth: number\r\n    sprite: Sprite\r\n    alive: boolean = true\r\n    uid: number\r\n    health: StatusBarSprite\r\n    upgradesDamage: number = 1\r\n    upgradesHealth: number = 1\r\n    upgradesDefense: number = 1\r\n    dupe(uidCount: boolean) {\r\n        return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.ability, this.speed, this.image, this.rarity, uidCount, this.rid)\r\n    }\r\n}\r\n\r\nfunction addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number) {\r\n    cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, ability, speed, costumes[costume], rarity, false, id))\r\n    id++\r\n}\r\n\r\nfunction addCubeling(name: string, costume: string, maxHealth: number, attack: number, defense: number, ability: string, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\r\n    addCubelingInternal(name, costume, maxHealth, attack, defense, ability, speed, rarity)\r\n    rarityMap.push([minAppearance, maxAppearance])\r\n}\r\n\r\naddCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, \"None\", 40, 1)\r\naddCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, \"Burn\", 20, 2)\r\naddCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, \"Heal\", 30, 2)\r\naddCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, \"Shield\", 10, 3)\r\naddCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, \"Speed\", 40, 4)\r\n\r\nconsole.log(\"started loading\")\r\nif (settings.readJSON(\"data\") != null) {\r\n    let data = JSON.parse(settings.readString(\"data\"))\r\n    playerTeam = jsonToCubelings(data.team, false)\r\n    ownedCubelings = jsonToCubelings(data.owned, true)\r\n    money = data.money\r\n    gems = data.gems\r\n    activatedCodes = data.codes\r\n} else {\r\n    playerTeam = [\r\n        cubelingPool[0].dupe(true),\r\n        cubelingPool[0].dupe(true),\r\n        cubelingPool[0].dupe(true)\r\n    ]\r\n    ownedCubelings = playerTeam\r\n    money = 0\r\n    gems = 0\r\n}\r\n\r\n//startGame()\r\n\r\nfunction simpleHash(str: string): number {\r\n    let hash = 0\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = ((hash << 5) - hash) + str.charCodeAt(i)\r\n        hash |= 0 // force 32-bit\r\n    }\r\n    return hash\r\n}\r\n\r\n\r\n\r\nfunction cubelingsToJSON(cublings: Cubeling[]) {\r\n    let end: { [key: string]: any }[] = []\r\n    for (let i of cublings) {\r\n        end.push({\r\n            name: i.name,\r\n            costume: i.costume,\r\n            maxHealth: i.maxHealth,\r\n            attack: i.attack,\r\n            defense: i.defense,\r\n            ability: i.ability,\r\n            speed: i.speed,\r\n            rarity: i.rarity,\r\n            uid: i.uid,\r\n            rid: i.rid,\r\n            upgradesDamage: i.upgradesDamage,\r\n            upgradesHealth: i.upgradesHealth,\r\n            upgradesDefense: i.upgradesDefense\r\n        })\r\n    }\r\n    return end\r\n}\r\n\r\nfunction jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\r\n    let end: Cubeling[] = []\r\n    for (let i of cublings) {\r\n        let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.ability, i.speed, costumes[i.costume], i.rarity, false, i.rid)\r\n        n.uid = i.uid\r\n        if (uidCount) uid = Math.max(uid, i.uid)\r\n        n.upgradesDamage = i.upgradesDamage\r\n        n.upgradesHealth = i.upgradesHealth\r\n        n.upgradesDefense = i.upgradesDefense\r\n        end.push(n)\r\n    }\r\n    return end\r\n}\r\n\r\nfunction save() {\r\n    settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\r\n}\r\n\r\n","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","menu.ts":"","battle.ts":"","pxt.json":"{\n    \"name\": \"rogueCubes\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"menu.ts\",\n        \"battle.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1754961445418,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"rogueCubes_start\"></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"level1\": {\n        \"id\": \"level1\",\n        \"mimeType\": \"application/mkcd-tilemap\",\n        \"data\": \"MTAwYTAwMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\",\n        \"tileset\": [\n            \"myTiles.transparency16\"\n        ],\n        \"displayName\": \"level1\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","ext.ts":"namespace rogueCubes{\n    /*\n    =========\n    main init\n    =========\n    */\n    // === Global Game State ===\n    let playerTeam: Cubeling[] = []\n    let ownedCubelings: Cubeling[] = []\n    let enemyTeam: Cubeling[] = []\n    let activatedCodes: string[] = []\n    let money = 0\n    let gems = 500\n    let difficulty = 1\n    let uid = 0\n    let teamMenuOpen = false\n    let rarityMap: number[][] = [\n        [1, 20],\n        [4, 100],\n        [4, 100],\n        [7, 500],\n        [10, Infinity]\n    ]\n    let id = 0\n\n    tiles.setCurrentTilemap(tilemap`level1`)\n\n    // === Cubeling Definition ===\n    class Cubeling {\n        constructor(\n            public name: string,\n            public costume: string,\n            public maxHealth: number,\n            public attack: number,\n            public defense: number,\n            public speed: number,\n            public image: Image,\n            public rarity: number,\n            uidCount: boolean,\n            public rid: number\n        ) {\n            this.currentHealth = maxHealth\n            this.uid = uid\n            if (uidCount) uid++\n        }\n        currentHealth: number\n        sprite: Sprite\n        alive: boolean = true\n        uid: number\n        health: StatusBarSprite\n        upgradesDamage: number = 1\n        upgradesHealth: number = 1\n        upgradesDefense: number = 1\n        dupe(uidCount: boolean) {\n            return new Cubeling(this.name, this.costume, this.maxHealth, this.attack, this.defense, this.speed, this.image, this.rarity, uidCount, this.rid)\n        }\n    }\n\n    let costumes: { [key: string]: Image } = {\n        Fire: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 f f f . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . 2 2 2 2 2 2 2 2 2 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n        Water: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 f f f . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . 9 9 9 9 9 9 9 9 9 . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n        Earth: img`\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b f f f . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . b b b b b b b b b . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n    . . . . . . . . . . . . . . . .\n`,\n        Basic: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 f f f . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . 1 1 1 1 1 1 1 1 1 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n        Lightning: img`\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 f f f . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . 5 5 5 5 5 5 5 5 5 . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n    `,\n    }\n    // === Sample Cubeling Pool ===\n    let cubelingPool: Cubeling[] = []\n    let codes: { [hash: number]: Cubeling } = {\n        872877828: new Cubeling(\"OPGUY\", \"Lightning\", 2000, 500, 4000, 50, costumes[\"Lightning\"], 60, false, -1)\n    }\n    function addCubelingInternal(name: string, costume: string, maxHealth: number, attack: number, defense: number, speed: number, rarity: number) {\n        cubelingPool.push(new Cubeling(name, costume, maxHealth, attack, defense, speed, costumes[costume], rarity, false, id))\n        id++\n    }\n\n    addCubelingInternal(\"Basic\", \"Basic\", 80, 15, 5, 40, 1)\n    addCubelingInternal(\"Flame\", \"Fire\", 100, 30, 10, 20, 2)\n    addCubelingInternal(\"Aqua\", \"Water\", 90, 25, 15, 30, 2)\n    addCubelingInternal(\"Rocky\", \"Earth\", 120, 20, 20, 10, 3)\n    addCubelingInternal(\"Thunder\", \"Lightning\", 150, 40, 10, 40, 4)\n\n    function load(){\n        if (settings.readJSON(\"data\") != null) {\n            let data = JSON.parse(settings.readString(\"data\"))\n            playerTeam = jsonToCubelings(data.team, false)\n            ownedCubelings = jsonToCubelings(data.owned, true)\n            money = data.money\n            gems = data.gems\n            activatedCodes = data.codes\n        } else {\n            playerTeam = [\n                cubelingPool[0].dupe(true),\n                cubelingPool[0].dupe(true),\n                cubelingPool[0].dupe(true)\n            ]\n            ownedCubelings = playerTeam\n            money = 0\n            gems = 0\n        }\n    }\n\n    //startGame()\n\n    function simpleHash(str: string): number {\n        let hash = 0\n        for (let i = 0; i < str.length; i++) {\n            hash = ((hash << 5) - hash) + str.charCodeAt(i)\n            hash |= 0 // force 32-bit\n        }\n        return hash\n    }\n\n    function cubelingsToJSON(cublings: Cubeling[]) {\n        let end: { [key: string]: any }[] = []\n        for (let i of cublings) {\n            end.push({\n                name: i.name,\n                costume: i.costume,\n                maxHealth: i.maxHealth,\n                attack: i.attack,\n                defense: i.defense,\n                speed: i.speed,\n                rarity: i.rarity,\n                uid: i.uid,\n                rid: i.rid,\n                upgradesDamage: i.upgradesDamage,\n                upgradesHealth: i.upgradesHealth,\n                upgradesDefense: i.upgradesDefense\n            })\n        }\n        return end\n    }\n\n    function jsonToCubelings(cublings: { [key: string]: any }[], uidCount: boolean) {\n        let end: Cubeling[] = []\n        for (let i of cublings) {\n            let n = new Cubeling(i.name, i.costume, i.maxHealth, i.attack, i.defense, i.speed, costumes[i.costume], i.rarity, false, i.rid)\n            n.uid = i.uid\n            if (uidCount) uid = Math.max(uid, i.uid)\n            n.upgradesDamage = i.upgradesDamage\n            n.upgradesHealth = i.upgradesHealth\n            n.upgradesDefense = i.upgradesDefense\n            end.push(n)\n        }\n        return end\n    }\n\n    function save() {\n        settings.writeString(\"data\", JSON.stringify({ money: money, gems: gems, owned: cubelingsToJSON(ownedCubelings), team: cubelingsToJSON(playerTeam), codes: activatedCodes }))\n    }\n    /*\n    ==================\n    battling interface\n    ==================\n    */\n    function battle() {\n        scene.setBackgroundImage(img`\n        9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n        9999999999999999999999999999999999999999999999999999111111111119999999999999999999999999999999999999991111999999999999999999999999999999999999999999111111111111\n        99999999999999999999999999999999999999999999999999991ddddddddd19999999999999999999999999991111199999991dd11999999999999999999999999999999999999999991dddddddddd1\n        99999999999999999999999999999911111999999999999999991ddddddddd19999999999999999999999999991ddd199999991ddd1999999999999999999991111999999999999999991dddddddddd1\n        9999999999999999999999999999911ddd1199999999999999991d11dddddd19999999999999999999999999111ddd111999911ddd1199999999999999999911dd1199999999999999991dd1d1ddddd1\n        999999999999999999999999999911ddddd199999999999999991ddddddd1d199999999111999999111111191ddddddd199991ddddd19999999999999999111dddd199999999999999991dddddd11dd1\n        99999911119999999999999999991dddddd199911199999999991ddddddddd1999999911d19999991ddddd191ddddddd199911ddddd119999999999999991dddddd199911119999999991dddddddddd1\n        9999991dd19999999999999999991ddd1d119991d199999999991ddddddddd199999991dd19999991ddddd191ddddddd199911ddddd119999999999999991ddd1d119991dd19999999991dddd1ddddd1\n        1111111dd19111111991111111111dddddd19111d111999999991ddddddd1d111111111dd19999991ddddd111d11dddd19111ddddddd11111991111111111dddddd19911dd11999999991ddddddd1dd1\n        d11dddddd191d1dd1991ddddddddddd1ddd111ddddd1111111111ddddddd1d11d11ddd1dd199999911dd1dd11ddddddd191dddddddddd1dd1991ddddddddddddd1d1111dddd1191111111dddddd11ddd\n        dddd1dddd191dddd19911d1dd1ddddddddd111ddddd111dd1dd11ddddddddd11dddd1d1dd11111111dddddd11dd1dddd191ddddddddddddd1991dd1ddd1dddddddd1111dddd1191d11dd1ddddddddddd\n        ddddddddd111dd1d1111dddddddddddddddd11dddddd11ddddddddddddddddd1ddddddddd11d11d11ddddddddddddddd191ddddddddddd1d1111dddddddddddddddd11dddddd111ddddddddddddddddd\n        d11d1dddd1ddddddd1dd1d1ddddddddddddd11ddddddd1dddd11ddddddddddddd1111ddddddd1ddd11dd1ddddddddddd111ddddddddddddddd1ddd1ddddddddddddd11ddddddd111d11ddddddddddddd\n        ddddddddd1ddddddd1dddddddddddddddddddd1dddddd11ddddddddddddddddddddddddddddd1ddd1ddddddddddddddd1d1ddddddddddddddd1dddddddddddddddddddddddddd1dddddddddddddddddd\n        cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n        1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n        11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc11ccccccccccc11cccccccccccc11ccccccccccc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc11cdddddddddc11cddddddddddc11cdddddddddc\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd111\n        111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbcbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d111d1111d111dd11dd\n        d11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11d\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd11111111111d1111d111dd11dd1111111111dddd1111111d\n        11ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d111111111ddd111111dddd11dd11111111111d1d1111111\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        cccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc\n        bccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccc\n        ccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbb\n        bbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbddbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddbbbbbbbbbbbbbbbbbdd1111111111dddd11111ddb\n        bbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111ddbbbbbbbbbbbbbbbbbdd11111111111d1d11111dd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcc\n        dbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbd\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n    `)\n        playerTeam.forEach((value, index) => {\n            value.sprite = sprites.create(value.image)\n            let statusbar = statusbars.create(10, 1, StatusBarKind.EnemyHealth)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 62\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n            value.alive = true\n        })\n        spawnEnemy()\n        startBattle()\n    }\n\n    function spawnEnemy() {\n        enemyTeam = []\n\n        // Filter based on allowed rarities (difficulty gates access)\n        const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n        // Build weighted pool: each cubeling appears multiple times based on rarity weight\n        const weightedPool: Cubeling[] = []\n        for (const cub of allowed) {\n            const weight = 1 / cub.rarity\n            const entries = Math.round(weight * 100) // scale to 100 for precision\n            for (let i = 0; i < entries; i++) {\n                weightedPool.push(cub)\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const base = pickCubelingFromPool()\n            const cub = base.dupe(false)\n            let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n            // Scale stats based on difficulty\n            cub.maxHealth += (scaledDifficulty * 5) - 10\n            cub.currentHealth = cub.maxHealth\n            cub.attack += (scaledDifficulty * 2) - 4\n            cub.defense += scaledDifficulty - 2\n            enemyTeam.push(cub)\n        }\n\n        // Create sprites and health bars\n        enemyTeam.forEach((value, index) => {\n            const image = value.image.clone()\n            image.flipX()\n            value.sprite = sprites.create(image, SpriteKind.Enemy)\n            const statusbar = statusbars.create(10, 1, StatusBarKind.Health)\n            statusbar.setColor(7, 12, 3)\n            statusbar.max = value.maxHealth\n            statusbar.value = value.currentHealth\n            value.health = statusbar\n            value.sprite.x = 98\n            value.sprite.y = 60 + (18 * index) - 18\n            value.health.x = value.sprite.x\n            value.health.y = value.sprite.y - 10\n        })\n    }\n\n    function getCubelingWeight(cub: Cubeling, difficulty: number, rarityMap: number[][]): number {\n        let rarity = cub.rarity\n        let minDiff = rarityMap[rarity - 1][0]\n        let maxDiff = rarityMap[rarity - 1][1]\n\n        // Outside allowed range → 0 weight\n        if (difficulty < minDiff || difficulty > maxDiff) return 0\n\n        // Map difficulty within [minDiff, maxDiff] to [low%, 100%]\n        // Low% at minDiff, ramps up to 100% at maxDiff\n        let lowPercent = 0.1 // you can tweak this\n        if (maxDiff == minDiff) return 1 // special case: constant 100%\n\n        let t = (difficulty - minDiff) / (maxDiff - minDiff) // 0 → 1\n        let weight = lowPercent + t * (1 - lowPercent)\n\n        return weight\n    }\n\n    function pickCubelingFromPool(): Cubeling {\n        let weights: number[] = []\n        let totalWeight = 0\n        for (let cub of cubelingPool) {\n            let w = getCubelingWeight(cub, difficulty, rarityMap)\n            weights.push(w)\n            totalWeight += w\n        }\n\n        let r = Math.random() * totalWeight\n        let acc = 0\n        for (let i = 0; i < cubelingPool.length; i++) {\n            acc += weights[i]\n            if (r < acc) return cubelingPool[i]\n        }\n        return cubelingPool[0] // fallback\n    }\n\n    function quickBattle() {\n        let totalEnemyStats = { attack: 0, health: 0, defense: 0 }\n        let totalPlayerStats = { attack: 0, health: 1, defense: 0 }\n        let inMon = 0\n        let inGem = 0\n        while (totalPlayerStats.health > 0) {\n            if (difficulty == 1) {\n                totalPlayerStats.health -= 1\n            }\n            enemyTeam = []\n\n            // Filter based on allowed rarities (difficulty gates access)\n            const allowed = cubelingPool.filter(c => difficulty >= (c.rid >= 0 ? rarityMap[c.rid][0] : -1) && difficulty <= (c.rid >= 0 ? rarityMap[c.rid][1] : -1))\n\n            // Build weighted pool: each cubeling appears multiple times based on rarity weight\n            const weightedPool: Cubeling[] = []\n            for (const cub of allowed) {\n                const weight = 1 / cub.rarity\n                const entries = Math.round(weight * 100) // scale to 100 for precision\n                for (let i = 0; i < entries; i++) {\n                    weightedPool.push(cub)\n                }\n            }\n\n            for (let i = 0; i < 3; i++) {\n                const base = pickCubelingFromPool()\n                const cub = base.dupe(false)\n                let scaledDifficulty = difficulty - rarityMap[cub.rarity - 1][0]\n                // Scale stats based on difficulty\n                cub.maxHealth += (scaledDifficulty * 5) - 10\n                cub.currentHealth = cub.maxHealth\n                cub.attack += (scaledDifficulty * 2) - 4\n                cub.defense += scaledDifficulty - 2\n                enemyTeam.push(cub)\n            }\n\n            enemyTeam.forEach(v => { totalEnemyStats.attack += v.attack; totalEnemyStats.health += v.maxHealth; totalEnemyStats.defense += v.defense })\n\n            playerTeam.forEach(v => { totalPlayerStats.attack += v.attack; totalPlayerStats.health += v.maxHealth; totalPlayerStats.defense += v.defense })\n            let playerTurn = false\n            while (totalEnemyStats.health > 0 && totalPlayerStats.health > 0) {\n                if (playerTurn) {\n                    totalEnemyStats.health -= totalPlayerStats.attack - totalEnemyStats.defense < 5 ? Math.round(totalPlayerStats.attack / totalEnemyStats.defense) : totalPlayerStats.attack - totalEnemyStats.defense\n                } else {\n                    totalPlayerStats.health -= totalEnemyStats.attack - totalPlayerStats.defense < 5 ? Math.round(totalEnemyStats.attack / totalPlayerStats.defense) : totalEnemyStats.attack - totalPlayerStats.defense\n                }\n                playerTurn = !playerTurn\n            }\n            if (totalPlayerStats.health > 0) {\n                difficulty++\n                money += Math.ceil(difficulty / 100)\n                inMon += Math.ceil(difficulty / 10)\n                gems += Math.ceil(Math.floor(difficulty / 10) / 10)\n                inGem += Math.ceil(Math.floor(difficulty / 10) / 10)\n            }\n        }\n        save()\n        game.splash(\"Money: \" + inMon + \", Gems: \" + inGem, \"Level Reached: \" + difficulty)\n        game.reset()\n    }\n\n    // === Battle Loop ===\n    function startBattle() {\n        let playerTurn = true\n        let playerIndex = 0\n        let enemyIndex = 0\n        playerTeam.sort((a, b) => b.speed - a.speed)\n        enemyTeam.sort((a, b) => b.speed - a.speed)\n        // Simplified Turn-Based System (one Cubeling each)\n        while (playerTeam.some(v => v.alive) && enemyTeam.some(v => v.alive)) {\n            if (playerTurn) {\n                let aliveDefender = enemyTeam.filter(val => val.alive)\n                let aliveAttacker = playerTeam.filter(val => val.alive)\n                dealDamage(aliveAttacker[playerIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n                aliveDefender = enemyTeam.filter(val => val.alive)\n                playerIndex++\n                playerIndex %= aliveAttacker.length\n                enemyIndex %= aliveDefender.length\n            } else {\n                let aliveDefender = playerTeam.filter(val => val.alive)\n                let aliveAttacker = enemyTeam.filter(val => val.alive)\n                dealDamage(aliveAttacker[enemyIndex], aliveDefender[randint(0, aliveDefender.length - 1)])\n                aliveDefender = playerTeam.filter(val => val.alive)\n                enemyIndex++\n                enemyIndex %= aliveAttacker.length\n                playerIndex %= aliveDefender.length\n            }\n            playerTurn = !playerTurn\n        }\n        endBattle()\n    }\n\n    function dealDamage(attacker: Cubeling, defender: Cubeling) {\n        let damage = attacker.attack - defender.defense < 5 ? Math.round(attacker.attack / defender.defense) : attacker.attack - defender.defense\n        if (damage < 0) damage = 0\n        defender.currentHealth -= damage\n        let pos = { x: attacker.sprite.x, y: attacker.sprite.y }\n        story.spriteMoveToLocation(attacker.sprite, attacker.sprite.x > defender.sprite.x ? defender.sprite.x + 16 : defender.sprite.x - 16, defender.sprite.y, attacker.speed * 2)\n        let text = textsprite.create(\"-\" + damage, 0, 2)\n        text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        text.y = defender.sprite.y\n        defender.health.value = defender.currentHealth\n        defender.health.setColor(defender.currentHealth > (defender.maxHealth * 3 / 4) ? 7 : defender.currentHealth > (defender.maxHealth * 2 / 4) ? 5 : defender.currentHealth > (defender.maxHealth / 4) ? 4 : 2, 12, 3)\n        if (defender.currentHealth <= 0) {\n            defender.alive = false\n            text.setText(\"X\")\n            text.x = attacker.sprite.x > defender.sprite.x ? defender.sprite.x - 20 : defender.sprite.x + 20\n        } else {\n            timer.after(500, function () {\n                sprites.destroy(text)\n            })\n        }\n        story.spriteMoveToLocation(attacker.sprite, pos.x, pos.y, attacker.speed * 2)\n    }\n\n    // === End Battle and Reward ===\n    function endBattle() {\n        let playerWins = !enemyTeam.some(v => v.alive)\n        if (playerWins) {\n            pause(700)\n            money += Math.ceil(difficulty / 10)\n            gems += Math.floor(Math.pow(difficulty, 0.5))\n            save()\n            difficulty += 1\n            // Heal Cubelings\n            for (let c of playerTeam) {\n                c.currentHealth = c.maxHealth\n                c.health.value = c.currentHealth\n                c.health.setColor(7, 12, 3)\n                c.alive = true\n            }\n            for (let e of enemyTeam) {\n                e.health.destroy()\n                e.sprite.destroy()\n            }\n            sprites.allOfKind(SpriteKind.Text).forEach(v => {\n                sprites.destroy(v)\n                pause(1)\n            })\n            spawnEnemy()\n            startBattle()\n        } else {\n            save()\n            game.gameOver(false)\n        }\n    }\n    /*\n    =================\n    menu/start screen\n    =================\n    */\n    function openTeamSelectMenu() {\n        teamMenuOpen = true\n        let page = 0\n        let selected: Cubeling[] = []\n        for (let i = 0; i < ownedCubelings.length; i++) {\n            if (i < 70) {\n                let newSprite = sprites.create(ownedCubelings[i].image, SpriteKind.Projectile)\n                let row = Math.floor(i / 10)\n                let column = i % 10\n                grid.place(newSprite, tiles.getTileLocation(column, row))\n            }\n        }\n        let mySprite = sprites.create(img`\n        5 5 5 5 . . . . . . . . 5 5 5 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        . . . . . . . . . . . . . . . .\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 . . . . . . . . . . . . . . 5\n        5 5 5 5 . . . . . . . . 5 5 5 5\n    `, SpriteKind.Player)\n        grid.place(mySprite, tiles.getTileLocation(0, 0))\n        grid.moveWithButtons(mySprite)\n        controller.right.onEvent(ControllerButtonEvent.Pressed, function () {\n            if (teamMenuOpen && grid.spriteCol(mySprite) == 9 && ownedCubelings.length > 70 * page) {\n                sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                let curLings = ownedCubelings.slice(page * 70 - 1, Math.min(ownedCubelings.length - 1, page * 70 + 69))\n                for (let i = 0; i < curLings.length; i++) {\n                    if (i < 70) {\n                        let newSprite = sprites.create(curLings[i].image)\n                        let row = Math.floor(i / 10)\n                        let column = i % 10\n                        grid.place(newSprite, tiles.getTileLocation(column, row))\n                    }\n                }\n            } else if (grid.spriteCol(mySprite) < 9) {\n                grid.move(mySprite, 1, 0)\n            }\n        })\n        controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n            let hovered = grid.spriteCol(mySprite) + (grid.spriteRow(mySprite) * 10) + (page * 70)\n            if (teamMenuOpen && ownedCubelings.length > hovered) {\n                if (selected.indexOf(ownedCubelings[hovered]) == -1) {\n                    selected.push(ownedCubelings[hovered])\n                    let selectedIndicator = sprites.create(img`\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 . . . . . . . . . . . . . . 3\n                    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n                `, SpriteKind.Food)\n                    selectedIndicator.z = mySprite.z - 1\n                    grid.place(selectedIndicator, tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite)))\n                    if (selected.length == 3) {\n                        sprites.allOfKind(SpriteKind.Projectile).forEach(v => sprites.destroy(v))\n                        sprites.allOfKind(SpriteKind.Food).forEach(v => sprites.destroy(v))\n                        sprites.destroy(mySprite)\n                        playerTeam = selected\n                        startGame()\n                    }\n                } else {\n                    selected.removeElement(ownedCubelings[hovered])\n                    grid.getSprites(tiles.getTileLocation(grid.spriteCol(mySprite), grid.spriteRow(mySprite))).filter(v => v.kind() == SpriteKind.Food).forEach(v => v.destroy())\n                }\n            }\n        })\n    }\n\n    // === Start Game ===\n    function startGame() {\n        story.showPlayerChoices(\"Shop\", \"Battle\", \"Equip\", \"More\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Battle\") {\n            battle()\n        } else if (story.getLastAnswer() == \"Shop\") {\n            let textSprite = textsprite.create(money.toString())\n            textSprite.setIcon(img`\n            . 5 5 5 .\n            5 4 5 5 5\n            5 5 4 5 5\n            5 4 4 4 5\n            . 5 5 5 .\n        `)\n            textSprite.y = 30\n            textSprite.x = 80\n            let textSprite2 = textsprite.create(gems.toString())\n            textSprite2.setIcon(img`\n            . . . . .\n            9 9 9 9 9\n            . 9 9 9 .\n            . . 9 . .\n            . . . . .\n        `)\n            textSprite2.y = 19\n            textSprite2.x = 80\n            pause(1)\n            shopping(textSprite, textSprite2)\n        } else if (story.getLastAnswer() == \"Equip\") {\n            openTeamSelectMenu()\n        } else if (story.getLastAnswer() == \"More\") {\n            story.showPlayerChoices(\"Quick Battle\", \"Reset Data\", \"Enter Code\", \"Back\")\n            while (story.isMenuOpen()) {\n                pause(1)\n            }\n            if (story.getLastAnswer() == \"Quick Battle\") {\n                quickBattle()\n            } else if (story.getLastAnswer() == \"Reset Data\") {\n                if (game.ask(\"Are you sure you want to do this?\", \"This action cannot be undone\")) {\n                    settings.remove(\"data\")\n                    game.reset()\n                } else {\n                    startGame()\n                }\n            } else if (story.getLastAnswer() == \"Enter Code\") {\n                let code = game.askForString(\"Code\", 20, false)\n                if (codes[simpleHash(code)] && activatedCodes.indexOf(code) == -1) {\n                    activatedCodes.push(code)\n                    ownedCubelings.push(codes[simpleHash(code)].dupe(true))\n                }\n                startGame()\n            } else if (story.getLastAnswer() == \"Back\") {\n                startGame()\n            }\n        }\n    }\n\n    function shopping(mone: TextSprite, jems: TextSprite) {\n        story.showPlayerChoices(\"Upgrade\", \"Recruit\", \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Recruit\") {\n            recruitCubeling(mone, jems)\n        } else if (story.getLastAnswer() == \"Upgrade\") {\n            selectUpgrades(mone, jems)\n        } else {\n            sprites.destroy(mone)\n            sprites.destroy(jems)\n            startGame()\n        }\n    }\n\n    function selectUpgrades(mone: TextSprite, jems: TextSprite) {\n        story.showPlayerChoices(playerTeam[0].name + \" #\" + playerTeam[0].uid, playerTeam[1].name + \" #\" + playerTeam[1].uid, playerTeam[2].name + \" #\" + playerTeam[2].uid, \"Back\")\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        let ansInx: number\n        if (story.getLastAnswer() == playerTeam[0].name + \" #\" + playerTeam[0].uid) ansInx = 0\n        else if (story.getLastAnswer() == playerTeam[1].name + \" #\" + playerTeam[1].uid) ansInx = 1\n        else if (story.getLastAnswer() == playerTeam[2].name + \" #\" + playerTeam[2].uid) ansInx = 2\n        else shopping(mone, jems)\n        upgrades(ansInx, mone, jems)\n    }\n\n    function upgrades(ansInx: number, mone: TextSprite, jems: TextSprite) {\n        let teamAns = playerTeam[ansInx]\n        let moneyCalc = (a: number) => (5 * a * teamAns.rarity) + a\n        story.showPlayerChoices(\n            \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage)),\n            \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth)),\n            \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense)),\n            \"Back\"\n        )\n        while (story.isMenuOpen()) {\n            pause(1)\n        }\n        if (story.getLastAnswer() == \"Damage: \" + teamAns.upgradesDamage + \", $\" + (moneyCalc(teamAns.upgradesDamage))) {\n            if (money >= moneyCalc(teamAns.upgradesDamage)) {\n                money -= moneyCalc(teamAns.upgradesDamage)\n                teamAns.upgradesDamage++\n                teamAns.attack += 5\n                mone.setText(money + \"\")\n            }\n            upgrades(ansInx, mone, jems)\n        } else if (story.getLastAnswer() == \"Health: \" + teamAns.upgradesHealth + \", $\" + (moneyCalc(teamAns.upgradesHealth))) {\n            if (money >= moneyCalc(teamAns.upgradesHealth)) {\n                money -= moneyCalc(teamAns.upgradesHealth)\n                teamAns.upgradesHealth++\n                teamAns.maxHealth += 10\n                teamAns.currentHealth = teamAns.maxHealth\n                mone.setText(money + \"\")\n            }\n            upgrades(ansInx, mone, jems)\n        } else if (story.getLastAnswer() == \"Defense: \" + teamAns.upgradesDefense + \", $\" + (moneyCalc(teamAns.upgradesDefense))) {\n            if (money >= moneyCalc(teamAns.upgradesDefense)) {\n                money -= moneyCalc(teamAns.upgradesDefense)\n                teamAns.upgradesDefense++\n                teamAns.defense += 5\n                mone.setText(money + \"\")\n            }\n            upgrades(ansInx, mone, jems)\n        } else {\n            selectUpgrades(mone, jems)\n        }\n    }\n\n    // === Recruit Menu ===\n    function recruitCubeling(mone: TextSprite, jems: TextSprite) {\n        if (gems < 500) {\n            game.splash(\"Not enough gems!\")\n            shopping(mone, jems)\n            return\n        }\n\n        gems -= 500\n\n        // Build weighted list dynamically\n        let weightedList: Cubeling[] = []\n        for (let c of cubelingPool) {\n            let weight = 1 / c.rarity\n            let count = Math.round(weight * 100) // Scale for precision\n            for (let i = 0; i < count; i++) {\n                weightedList.push(c)\n            }\n        }\n\n        let selected = weightedList[Math.randomRange(0, weightedList.length - 1)].dupe(true)\n        ownedCubelings.push(selected)\n\n        game.splash(`Recruited ${selected.name}!`)\n        jems.setText(gems.toString())\n        jems.x = 80\n        shopping(mone, jems)\n    }\n\n    /*\n    =============================\n    Public stuff for future packs\n    =============================\n    */\n    //%block\n    export function start(){\n        load()\n        startGame()\n    }\n    //%block=\"make new cubeling '$name' with costume $costumeImg named $costume and maxHealth: $maxHealth, damage: $attack, defense: $defense, speed: $speed, rarity: $rarity, minimum difficulty appearance: $minAppearance, maximum difficulty appearance: $maxAppearance\"\n    //%costumeImg.shadow='screen_image_picker'\n    export function addCubeling(name: string, costumeImg: Image, costume: string, maxHealth: number, attack: number, defense: number, speed: number, rarity: number, minAppearance: number, maxAppearance: number) {\n        costumes[costume] = costumeImg\n        addCubelingInternal(name, costume, maxHealth, attack, defense, speed, rarity)\n        rarityMap.push([minAppearance, maxAppearance])\n    }\n}\n","pxt.json":"{\n    \"name\": \"rogueCubes\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-story\": \"github:microsoft/arcade-storytelling#v1.0.3\",\n        \"pxt-status-bar\": \"github:jwunderl/pxt-status-bar#v0.4.2\",\n        \"Sprite Grid\": \"github:microsoft/arcade-grid#v1.3.0\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\",\n        \"Timers\": \"github:microsoft/arcade-timers#v1.1.0\",\n        \"settings-blocks\": \"github:microsoft/pxt-settings-blocks#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\",\n        \"ext.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[{"id":"14031-21119-34232-70690","timestamp":1754572415840}],"lastSaveTime":1754962277127}